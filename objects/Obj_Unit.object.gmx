<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_Sight</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 설정.
event_inherited();

direction = 270;
image_angle = 270;

// 스프라이트 지정.
sprite[0] = -1; // 정지 스프라이트.
sprite[1] = -1; // 이동중 스프라이트.
sprite[2] = -1; // 공격 스프라이트.
sprite[3] = -1; // 공격중 스프라이트.

// GUI에 명령을 뿌릴 변수입니다. []은 순서입니다.
get_command[0] = 0; // 정지.
get_command[1] = 1; // 이동.
get_command[2] = 3; // 홀드.
get_command[3] = 2; // 공격.
get_command[4] = -1;
get_command[5] = -1;
get_command[6] = -1;
get_command[7] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DESTROY.
event_inherited();

global.get_resource_value[set_player, 2] += build_resource[2];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 명령 수행.
event_inherited();

if (global.lock_step == false)
{
    image_speed = image_speed_value;
    path_speed = move_speed;
    
    if (build != 0) 
    &amp;&amp; (action != 8) &amp;&amp; (action != 9) &amp;&amp; (action != 10) &amp;&amp; (action != 19)
    {
        var _place = instance_place(x, y, Obj_Sight);
        if (instance_exists(_place) == true)
        {
            if (_place.build != 0)
            &amp;&amp; (_place.air == air)
            {
                if (path_index != -1) 
                &amp;&amp; (_place.path_speed != 0) 
                &amp;&amp; (_place.id &gt; id)
                &amp;&amp; (attack_target == noone)
                {
                    path_speed = 0;
                }
                
                if ((path_index == -1) || (attack_target != noone))
                &amp;&amp; (_place.action != 10)
                {
                    path_end();
                    var _x = ceil(lengthdir_x(move_speed, point_direction(_place.x, _place.y, x, y)));
                    var _y = ceil(lengthdir_y(move_speed, point_direction(_place.x, _place.y, x, y))); 
                    
                    _meet = place_meeting(x + _x, y + _y, Obj_Block);
                    if (_meet == false) {x += _x; y += _y;}
                }
            }
        }
    }
    
    if !(action == 2 || action == 3 || action == 10) {attack_first = false; attack_target = noone; attack_move = noone;}
    if (attack_time &gt; 0) {attack_time --;}
    if (instance_exists(attack_target) == false)
    {
        attack_target = noone;
    }
    else
    {
        // 스프라이트 변경.
        if (sprite_index == sprite[3])
        {
            if ((image_index + image_speed) &gt;= sprite_get_number(sprite[3]))
            {
                sprite_index = sprite[2];
            }
        } else if (sprite_index == sprite[1]) {sprite_index = sprite[2];}
    }
    
    if (run_step_alarm == 0)
    {
        switch(action)
        {
            case 0: // 정지.
            {
                var _spr = sprite[0];
                if (sprite_index != _spr) {sprite_index = _spr;}
                path_end();
                
                if (attack_type != -1)
                {
                    while(true)
                    {
                        var _ins = instance_nearest(x, y, Obj_Sight);
                        if (instance_exists(_ins) == true)
                        {
                            if (id != _ins.id)
                            {
                                if (distance_to_object(_ins) &lt;= attack_sense_range)
                                {
                                    if ((set_team != _ins.set_team) 
                                    &amp;&amp; (set_floor &gt;= _ins.set_floor)
                                    &amp;&amp; ((attack_air == -1) || (_ins.air == attack_air))
                                    &amp;&amp; (_ins.build != 0)
                                    &amp;&amp; (_ins.set_team != noone))
                                    || ((_ins.hit == true) &amp;&amp; (set_team == _ins.set_team))
                                    {
                                        action = 2;
                                        instance_activate_all();
                                        if (instance_exists(_ins.hit_caster) == true)
                                        {
                                            if (set_team == _ins.hit_caster.set_team) {action = 0; break;}
                                            move_x = _ins.hit_caster.x;
                                            move_y = _ins.hit_caster.y;
                                        }
                                        else
                                        {
                                            move_x = _ins.x;
                                            move_y = _ins.y;
                                        }
                                        moving = true;
                                        attack_first = true;
                                        break;
                                    } else {instance_deactivate_object(_ins);}
                                } else {instance_activate_all(); break;}
                            } else {instance_deactivate_object(_ins);}
                        } else {instance_activate_all(); break;}
                    }
                }
                break;
            }
            
            case 1: // 이동.
            {
                var _spr = sprite[1];
                if (sprite_index != _spr) {sprite_index = _spr;}
    
                if (moving == true)
                {
                    path = node_path(path, move_x, move_y);
                    path_start(path, move_speed, path_action_stop, false);
                    moving = false;
                }
                
                if (path_index == -1) {action = 0;}
                else
                {
                    var _pos = instance_position(move_x, move_y, Obj_Building);
                    if (instance_exists(_pos) == true)
                    {
                        var _place = instance_place(x, y, _pos);
                        if (instance_exists(_place) == true)
                        {
                            path_end();
                        }
                    }
                }
                break;
            }
            
            case 2: // 공격.
            {
                if (attack_first == false)
                {
                    if (attack_focus == noone) {attack_focus = instance_position(move_x, move_y, Obj_Sight);}
                    var _ins = attack_focus;
                    if (instance_exists(_ins) == true)
                    &amp;&amp; ((attack_air == -1) || (_ins.air == attack_air))
                    &amp;&amp; (_ins.build != 0)
                    &amp;&amp; (_ins.set_team != noone)
                    {
                        if (distance_to_object(_ins) &lt;= attack_range)
                        &amp;&amp; (set_floor &gt;= _ins.set_floor)
                        {
                            path_end();
                            attack_target = _ins;

                            var _dir = point_direction(x, y, attack_target.x, attack_target.y);
                            if (abs(image_angle - _dir) &lt;= attack_angle)
                            &amp;&amp; (attack_time == 0)
                            {
                                if (sprite_index != sprite[3]) {sprite_index = sprite[3];}
                                if (ceil(image_index) == attack_image) {event_user(0);}
                            }
                            direction = _dir;
                            path_speed = 0;
                        }
                        else
                        {
                            attack_target = noone;
                            
                            var _spr = sprite[1];
                            if (sprite_index != _spr) {sprite_index = _spr;}
    
                            if (moving == true)
                            {
                                path = node_path_attack(path, _ins.x, _ins.y);
                                path_start(path, move_speed, path_action_stop, false);
                                moving = false;
                            }
                            if (path_index == -1) {action = 0;}
                        }
                    }
                    else
                    {
                        attack_target = noone;
                        attack_focus = noone;
                        attack_first = true;
                        moving = true;
                    }
                }
                else
                {
                    while(true)
                    {
                        var _ins = instance_nearest(x, y, Obj_Sight);
                        if (instance_exists(_ins) == true)
                        {
                            if (id != _ins.id)
                            &amp;&amp; (set_team != _ins.set_team)
                            &amp;&amp; ((attack_air == -1) || (_ins.air == attack_air))
                            &amp;&amp; (_ins.build != 0)
                            &amp;&amp; (_ins.set_team != noone)
                            {
                                if (distance_to_object(_ins) &lt;= attack_sense_range)
                                {
                                    attack_move = _ins;
                                    if (distance_to_object(_ins) &lt;= attack_range)
                                    &amp;&amp; (set_floor &gt;= _ins.set_floor)
                                    {
                                        path_end();
                                        attack_target = _ins;

                                        var _dir = point_direction(x, y, attack_target.x, attack_target.y);
                                        if (abs(image_angle - _dir) &lt;= attack_angle)
                                        &amp;&amp; (attack_time == 0)
                                        {
                                            if (sprite_index != sprite[3]) {sprite_index = sprite[3];}
                                            if (ceil(image_index) == attack_image) {event_user(0);}
                                        }
                                        attack_move = noone;
                                        direction = _dir;
                                        path_speed = 0;
                                    } else {attack_target = noone;}
                                    instance_activate_all();
                                    break;
                                } else {attack_target = noone; instance_activate_all(); break;}
                            } else {instance_deactivate_object(_ins);}
                        } else {attack_target = noone; instance_activate_all(); break;}
                    }
                    
                    if (build != 0)
                    {
                        if (instance_exists(attack_move) == true) 
                        {
                            var _spr = sprite[1];
                            if (sprite_index != _spr) {sprite_index = _spr;}
                            
                            path = node_path_attack_move(path, attack_move.x, attack_move.y);
                            path_start(path, move_speed, path_action_stop, false);
                            moving = true;
                            attack_move = noone;
                        }
                        else if (attack_target == noone)
                        {
                            var _spr = sprite[1];
                            if (sprite_index != _spr) {sprite_index = _spr;}
        
                            if (moving == true)
                            {
                                path = node_path(path, move_x, move_y);
                                path_start(path, move_speed, path_action_stop, false);
                                moving = false;
                            }
                            
                            if (path_index == -1) {action = 0;}
                        }
                    } else if (attack_target == noone) {action = 0;}
                }
                break;
            }
            
            case 3: // 홀드.
            {
                while(true)
                {
                    var _ins = instance_nearest(x, y, Obj_Sight);
                    if (instance_exists(_ins) == true)
                    {
                        if (id != _ins.id)
                        &amp;&amp; (set_team != _ins.set_team)
                        &amp;&amp; (set_floor &gt;= _ins.set_floor)
                        &amp;&amp; ((attack_air == -1) || (_ins.air == attack_air))
                        &amp;&amp; (_ins.build != 0)
                        &amp;&amp; (_ins.set_team != noone) 
                        {
                            if (distance_to_object(_ins) &lt;= attack_range)
                            {
                                path_end();
                                attack_target = _ins;
                                
                                var _dir = point_direction(x, y, attack_target.x, attack_target.y);
                                if (abs(image_angle - _dir) &lt;= attack_angle)
                                &amp;&amp; (attack_time == 0)
                                {
                                    var _spr = sprite[3];
                                    if (sprite_index != _spr) {sprite_index = _spr;}
                                    if (ceil(image_index) == attack_image) {event_user(0);}
                                }
                                direction = _dir;
                                instance_activate_all();
                                break;
                            } 
                            else 
                            {
                                instance_activate_all(); break;
                            }
                        } else {instance_deactivate_object(_ins);}
                    } 
                    else 
                    {
                        instance_activate_all(); break;
                    }
                }
                
                if (attack_target == noone)
                {
                    if (path_index == -1) {var _spr = sprite[0]; if (sprite_index != _spr) {sprite_index = _spr;}}
                    else {var _spr = sprite[1]; if (sprite_index != _spr) {sprite_index = _spr;}}
                }
                break;
            }
            
            case 10: // 탑승.
            {
                if (attack_move == noone) 
                {
                    while(true)
                    {
                        attack_move = instance_position(move_x, move_y, Obj_Sight);
                        if (instance_exists(attack_move) == true)
                        {
                            if (attack_move.build == 0)
                            {instance_deactivate_object(attack_move);}
                            else
                            {instance_activate_all(); break;}
                        }
                        else {instance_activate_all(); break;}
                    }
                }
                
                var _ins = attack_move;
                if (instance_exists(_ins) == true)
                &amp;&amp; (build != 0)
                {
                    if (instance_place(x, y, _ins) != noone)
                    {
                        if (_ins.slot_number + slot &lt;= _ins.slot_max)
                        &amp;&amp; (ds_list_find_index(_ins.slot_list, id) == -1) 
                        {
                            ds_list_add(_ins.slot_list, id);
                            _ins.slot_number += slot;
                            build = 0;
                        }
                        action = 0;
                    }
                    else
                    {
                        path = node_path(path, attack_move.x, attack_move.y);
                        path_start(path, move_speed, path_action_stop, false);
                    }
                } else {action = 0;}
                break;
            }
        } 
        run_step_alarm = run_step_alarm_max;
    } else {run_step_alarm --;}
}
else
{
    image_speed = 0;
    path_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 건물 및 유닛을 드로우 합니다.
event_inherited();

if (view_xview[0] &lt;= bbox_right &amp;&amp; bbox_left &lt;= view_xview[0] + view_wview[0] &amp;&amp; view_yview[0] &lt;= bbox_bottom &amp;&amp; bbox_top &lt;= view_yview[0] + view_hview[0]) 
&amp;&amp; (ds_grid_get(Obj_Game_System.fog_grid, f_x, f_y) == 0)
{
    shader_set(shader_set_colour);
    shader_set_uniform_f(colour_to_find, 1, 0, 0);       
    shader_set_uniform_f(colour_to_set, global.get_colour_rgb[set_colour, 0], global.get_colour_rgb[set_colour, 1], global.get_colour_rgb[set_colour, 2]); // R, G, B.
    draw_sprite_ext(sprite_index, image_index, floor(x), floor(y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);   
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
