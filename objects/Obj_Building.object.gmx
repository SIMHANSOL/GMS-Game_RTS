<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_Sight</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 생성.
event_inherited();

// 노드 생성.
node_create();

// 설정 값.
hit_part = Obj_Part_System.building_break; // 피격 파티클.
hit_part_number = 5; // 피격 파티클 숫자.
resource_building = false; // 자원 채집 건물인지.
produce = false; // 유닛 생산이 가능한 건물인지.
build_tech = -1; // 빌드 테크.
part = Obj_Part_System.human_build_up; // 건설 완료시 생성되는 파티클.

// 기본 값.
vision = false; // 보였는지 안보였는지 확인하고 드로우.
supply_plus = false; // 인구에 조정이 있는 건물이 연산이 되었는지 확인하는 값.
part_check = false; // 처음 건설 완료했을 때, 파티클 생성.
build_id = noone; // 건설이 0 상태일 때, 마킹하는 유닛이 없을 경우.
build_num = -1; // 마킹하는 유닛의 ACTION을 담고 마킹하는 유닛의 ACTION이 달라졌는지 확인 작업을 진행하는 변수.
build_time = 1; // 건설에 사용되는 변수.
max_produce = 8; // 유닛 최대 대기열.
build_sight_range = sight_range; // 건설 완료 후 시야.
sight_range = floor((sight_range) / 2); // 건설 완료 전 시야.
index_number = 0; // 애니메이션 넘버링.
index_speed = 0.2; // 애니메이션 속도.
move_x = x;
move_y = bbox_bottom;

// 스프라이트 지정.
sprite[0] = -1; // 기본 스프라이트.
sprite[1] = -1; // 생산 스프라이트.

// GUI에 명령을 뿌릴 변수입니다. []은 순서입니다.
get_command[0] = -1;
get_command[1] = -1;
get_command[2] = -1;
get_command[3] = -1;
get_command[4] = -1;
get_command[5] = -1;
get_command[6] = -1;
get_command[7] = -1;

// 생산 대기열.
for(var _i = (max_produce - 1); _i &gt;= 0; _i --)
{
    waiting[_i] = noone;
    waiting_time[_i] = -1;
    waiting_time_max[_i] = -1;
    waiting_sprite[_i] = -1;
    waiting_number[_i] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 파괴시 인구 수 조절.
event_inherited();

for(var _i = 0; _i &lt; 4; _i ++)
{
    if (instance_exists(node[_i]) == true)
    {
        instance_destroy(node[_i]);
    }
}

if (build != 0)
&amp;&amp; (supply_plus == true)
{
    global.get_resource_value[set_player, 3] += supply;
    
    if (build_tech != -1)
    {
        var _tech_check = false;
        with(object_index)
        {
            if (other.id != self.id)
            &amp;&amp; (other.set_player == self.set_player)
            {
                _tech_check = true;
                break;       
            }
        }
        global.get_building[set_player, build_tech] = _tech_check;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 건설 상태에 따른 조절.
event_inherited();

if (build == 0) // 건설 대기중일 때.
{
    if (instance_exists(build_id) == true)
    {
        if (build_id.action == build_num) {}
        else
        {
            global.get_resource_value[set_player, 0] -= build_resource[0];
            global.get_resource_value[set_player, 1] -= build_resource[1];
            global.get_resource_value[set_player, 2] += build_resource[2];
            
            build_id.build_target = noone;
            build_id.build_obj = noone;
            instance_destroy();
        }
    }
    else
    {
        global.get_resource_value[set_player, 0] -= build_resource[0];
        global.get_resource_value[set_player, 1] -= build_resource[1];
        global.get_resource_value[set_player, 2] += build_resource[2];
        
        instance_destroy();
    }
}
else // 건설 및 수리.
{
    if (instance_exists(build_id) == true)
    {
        if (build_id.action != 8) {build_id = noone;}
        else
        {
            var _width = (sprite_get_width(build_id.sprite_index) / 2);
            var _height = (sprite_get_height(build_id.sprite_index) / 2);
            var _place = collision_rectangle(build_id.x - _width, build_id.y - _height, build_id.x + _width, build_id.y + _height, self.id, false, false);
            if (instance_exists(_place) == false) {build_id = noone;}
        }
    }
    else {build_id = noone;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 건설 취소.
event_inherited();

if (build == 1) // 건설 중일 때.
{
    if (action == 4)
    {
        global.get_resource_value[set_player, 0] -= (build_resource[0] / 2);
        global.get_resource_value[set_player, 1] -= (build_resource[1] / 2);
        global.get_resource_value[set_player, 2] += build_resource[2];

        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 건설 취소 버튼.
event_inherited();

if (build == 1) // 건설이 완료되지 않을 땐 취소 버튼만 생성.
{
    get_command[7] = 4;
}
else
{
    get_command[7] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 파티클 및 시야, 테크 조절을 위한 곳입니다.
if (build == 2) // 건설 완료시.
{
    if (part_check == false)
    {
        if (ds_grid_get(Obj_Game_System.fog_grid, f_x, f_y) == 0)
        {part_particles_create(Obj_Part_System.system_part, x, y, part, 5);}
        sight_range = build_sight_range;
        part_check = true;
    }
    if (supply_plus == false)
    {
        global.get_resource_value[set_player, 3] -= supply;
        if (build_tech != -1) // 테크 조절.
        {
            global.get_building[set_player, build_tech] = true;
        }
        supply_plus = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 건물 및 유닛을 드로우 합니다.
event_inherited();

if (build &gt; 0)
{
    var _sight_check = ds_grid_get(Obj_Game_System.fog_grid, f_x, f_y);
    if (_sight_check == 0) {vision = true;}
    
    if (vision == true)
    &amp;&amp; (view_xview[0] &lt;= bbox_right &amp;&amp; bbox_left &lt;= view_xview[0] + view_wview[0] &amp;&amp; view_yview[0] &lt;= bbox_bottom &amp;&amp; bbox_top &lt;= view_yview[0] + view_hview[0]) 
    {
        shader_set(shader_set_colour);
        shader_set_uniform_f(colour_to_find, 1, 0, 0);       
        shader_set_uniform_f(colour_to_set, global.get_colour_rgb[set_colour, 0], global.get_colour_rgb[set_colour, 1], global.get_colour_rgb[set_colour, 2]); // R, G, B.
        
        var _check = false;
        if (produce == true)
        {
            var _width_offset = sprite_get_width(Spr_Unit_Stat) / 2;
            var _height_offset = sprite_get_height(Spr_Unit_Stat) / 2;
            draw_set_alpha(0.6);
            for(var _i = 0; _i &lt; max_produce; _i ++)
            {
                if (waiting[_i] != noone)
                {
                    _check = true;
                    
                    if (_sight_check == 0)
                    {
                        if (_i &lt; 4)
                        {
                            var _x = x - (_width_offset * 2) + (_width_offset * (_i + 1));
                            var _y = (bbox_top - _height_offset);
                        }
                        else
                        {
                            var _x = x - (_width_offset * 2) + (_width_offset * (_i - 3));
                            var _y = (bbox_top - (_height_offset * 2));
                        }
                        
                        if (_i == 0)
                        {
                            draw_healthbar(floor(_x - 40), floor(_y), floor(_x), floor(_y - 40),
                            floor(100 - ((waiting_time[_i] / waiting_time_max[_i]) * 100)), c_black, c_green, c_lime, 0, true, true);
                        }
                        draw_sprite_ext(Spr_Unit_Stat, waiting_sprite[_i], _x - 40, _y - 40, 0.42, 0.42, 0, c_white, draw_get_alpha());
                    }   
                } else {break;}
            }
            draw_set_alpha(1);
        }
        var _colour = c_white; 
        if (build == 1) {_colour = c_gray;}
        if (_sight_check == 0) &amp;&amp; (_check == true) 
        {sprite_index = sprite[1];} else {sprite_index = sprite[0];}
        draw_sprite_ext(sprite_index, index_number, floor(x), floor(y), image_xscale, image_yscale, image_angle, _colour, image_alpha);
        shader_reset();
    }
}
else
{
    // 건물 건설 위치 표기.
    if (global.set_player == set_player)
    {
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_green, 0.6);   
    }
}

if (global.lock_step == false)
{
    var _number = sprite_get_number(sprite_index);
    if (index_number &gt;= _number) {index_number = 0;} else {index_number += index_speed;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
