<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_103</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_Building</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI에 명령을 뿌릴 변수입니다. []은 순서입니다.
event_inherited();

draw_hp_bar_y = 96; // 얼마나 위로 올릴지 정합니다.

// 스프라이트 지정.
sprite[0] = Spr_103;
//sprite[1] = Spr_102_Produce;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 행동에 따른 생산을 처리합니다.
event_inherited();

if (build == 2) // 건설이 완료되지 않을 땐 취소 버튼만 생성.
{
    get_command[0] = 0;
    get_command[1] = 2;
    get_command[2] = -1;
    get_command[3] = -1;
    get_command[4] = -1;
    get_command[5] = -1;
    get_command[6] = -1;
    get_command[7] = -1;

    if (global.lock_step == false)
    {
        if (attack_time &gt; 0) {attack_time --;}
        
        if (run_step_alarm == 0)
        {
            action = 0;
            while(true)
            {
                var _ins = instance_nearest(x, y, Obj_Sight);
                if (instance_exists(_ins) == true)
                {
                    if (_ins.set_team != noone)
                    &amp;&amp; (_ins.build != 0)
                    &amp;&amp; (self.id != _ins.id)
                    &amp;&amp; (self.set_team != _ins.set_team)
                    &amp;&amp; (self.set_floor &gt;= _ins.set_floor)
                    &amp;&amp; ((attack_air == -1) || (_ins.air == attack_air))
                    {
                        if (distance_to_object(_ins) &lt;= attack_range)
                        {
                            action = 2;
                            attack_target = _ins;
                            
                            if (attack_time == 0) {event_user(0);}
                            instance_activate_all();
                            break;
                        } 
                        else {instance_activate_all(); break;}
                    } else {instance_deactivate_object(_ins);}
                } else {instance_activate_all(); break;}
            }
            run_step_alarm = run_step_alarm_max;
        } else {run_step_alarm --;}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
