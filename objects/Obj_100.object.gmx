<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_100</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_Building</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 생성시 값 조정.
event_inherited();

// 사용자가 지정해줘야 하는 변수.
build_tech = 0;
resource_building = true;
produce = true;
draw_hp_bar_y = 128; // 얼마나 위로 올릴지 정합니다.

// 스프라이트 지정.
sprite[0] = Spr_100;
sprite[1] = Spr_100_Produce;

// 생산 목록.
var _num = -1;
_num = 0;
create_object[_num] = Obj_0;
var _index = return_csv_number(create_object[_num]);
create_sprite[_num] = real(global.sight_table[_index, return_str_number("gui_sprite")]);
create_resource[_num, 0] = real(global.sight_table[_index, return_str_number("create_resource_1")]);
create_resource[_num, 1] = real(global.sight_table[_index, return_str_number("create_resource_2")]);
create_resource[_num, 2] = real(global.sight_table[_index, return_str_number("create_resource_3")]);
create_time[_num] = (real(global.sight_table[_index, return_str_number("create_time")]) * room_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 행동에 따른 생산을 처리합니다.
event_inherited();

if (build == 2) // 건설이 완료된 상태일 때 GUI를 드로우합니다.
{
    get_command[0] = 20;
    get_command[1] = -1;
    get_command[2] = -1;
    get_command[3] = -1;
    get_command[4] = -1;
    get_command[5] = -1;
    get_command[6] = -1;
    get_command[7] = -1;
    
    if (waiting[0] != noone) // 대기열에 하나라도 존재할 시 취소 버튼 생성.
    {
        get_command[7] = 4;
    }
}

if (global.lock_step == false) // 락 스텝이 걸리지 않았을 때 진행합니다.
{
    var _select = -1;
    switch(action) // 명령에 따라 처리합니다.
    {
        case 4: // 생산 취소 명령입니다.
        {
            if (build == 2) // 건설이 완료된 상태일 때는.
            {
                for (var _i = (max_produce - 1); _i &gt;= 0; _i --) // 맨 나중 대기열부터 처리합니다.
                {
                    if (waiting[_i] != noone) // 대기열에 존재할 시에.
                    {
                        waiting[_i] = noone; // 대기열을 제거.
                        waiting_time[_i] = -1;
                        waiting_time_max[_i] = -1;
                        waiting_sprite[_i] = -1;
                        global.get_resource_value[set_player, 0] -= create_resource[waiting_number[_i], 0];
                        global.get_resource_value[set_player, 1] -= create_resource[waiting_number[_i], 1];
                        global.get_resource_value[set_player, 2] += create_resource[waiting_number[_i], 2];
                        waiting_number[_i] = -1;
                        break; // 반복문 벗어나기.
                    }
                }
                action = 0; // 진행이 완료되었으면 다시 0을 반환합니다.
            }
            else if (build == 1)
            {
                // 건물 반환.
            }
            break;
        }
        
        default: 
        {
            for(var _i = 0; _i &lt; max_produce; _i ++)
            {
                if (get_command[_i] == action)
                {
                    _select = _i;
                }
            }
            
            if (_select != -1)
            {
                for (var _i = 0; _i &lt; max_produce; _i ++) // 처음 대기열부터.
                {
                    if (waiting[_i] == noone) // 대기열이 빈 상태일 경우.
                    {
                        var _check = true;
                        for(var _k = 0; _k &lt; 3; _k ++)
                        {
                            var _res = (global.get_resource[set_player, _k] - global.get_resource_value[set_player, _k]);
                            if (_k == 2)
                            {
                                var _res_max = (global.get_resource[set_player, 3] - global.get_resource_value[set_player, 3]);
                                if !((_res + create_resource[_select, _k]) &lt;= _res_max)
                                {
                                    _check = false;
                                    break;
                                }
                            }
                            else if (_res &lt; create_resource[_select, _k]) 
                            {
                                _check = false; 
                                break;
                            }
                        }
                        if (_check == true)
                        {
                            global.get_resource_value[set_player, 0] += create_resource[_select, 0];
                            global.get_resource_value[set_player, 1] += create_resource[_select, 1];
                            global.get_resource_value[set_player, 2] -= create_resource[_select, 2];
                            waiting[_i] = create_object[_select];
                            waiting_time_max[_i] = create_time[_select];
                            waiting_time[_i] = waiting_time_max[_i];
                            waiting_sprite[_i] = create_sprite[_select];
                            waiting_number[_i] = _select;
                        }
                        else if (global.set_player == set_player)
                        {
                            Obj_Game_System.command_string_switch = true;
                            Obj_Game_System.command_string = Obj_Game_System.command_string_list[_k];
                            Obj_Game_System.command_string_time = Obj_Game_System.command_string_time_max;
                        }
                        action = 0; break;
                    }
                }
            }
            break;
        }
    }
    
    // 대기열에 유닛이 생성 대기중일 경우.
    if (waiting[0] != noone)
    {
        if (waiting_time[0] == 0) // 대기열 생산 대기 시간이 다 되었을 경우.
        {
            var _bbox_bottom = sprite_get_bbox_bottom(object_get_sprite(waiting[0]));
            var _x = self.x;
            var _y = self.bbox_bottom + (_bbox_bottom / 2);
            var _ins = instance_create(_x, _y, waiting[0]);
            
            _ins.set_id = global.id_count ++;
            _ins.set_player = set_player;
            _ins.set_team = set_team;
            _ins.set_colour = set_colour;
            
            _ins.build_resource[0] = create_resource[waiting_number[0], 0];
            _ins.build_resource[1] = create_resource[waiting_number[0], 1];
            _ins.build_resource[2] = create_resource[waiting_number[0], 2];

            var _dir = point_direction(x, y, move_x, move_y);
            _ins.direction = _dir;
            _ins.image_angle = _dir;

            ds_list_add(global.list_id, _ins.set_id);
            ds_list_add(global.list_id, _ins.id);
            
            if (global.set_team == other.set_team)
            {
                ds_list_add(global.list_sight, _ins.id);
            }
            
            _ins.action = 1;
            _ins.move_x = move_x;
            _ins.move_y = move_y;
            
            if (instance_exists(ai_obj) == true)
            {
                _ins.ai_obj = ai_obj;
            }
            
            // 전용 이벤트.
            if (waiting[0] == create_object[0])
            {
                var _obj = instance_position(move_x, move_y, Obj_Sight);
                if (instance_exists(_obj) == true)
                {
                    _obj = object_get_parent(_obj.object_index);
                    if (_obj == Obj_Building) {_ins.action = 8;} 
                    else if (_obj == Obj_Resource) {_ins.action = 9;}
                }
            }
            
            // 생산 후 대기열 정렬.
            for (var _i = 0; _i &lt; (max_produce - 1); _i ++)
            {
                waiting[_i] = waiting[_i + 1];
                waiting_time[_i] = waiting_time[_i + 1];
                waiting_time_max[_i] = waiting_time_max[_i + 1];
                waiting_sprite[_i] = waiting_sprite[_i + 1]
                waiting_number[_i] = waiting_number[_i + 1];
            }
            waiting[7] = noone;
            waiting_time[7] = -1;
            waiting_time_max[7] = -1;
            waiting_sprite[7] = -1;
            waiting_number[7] = -1;
        }
        else // 대기열 시간이 다 안됐을 경우.
        {
            waiting_time[0] --;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
