<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_7_Body</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_Unit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 설정.
event_inherited();

// 고유 변수.
body_angle = 270;
body_angle_speed = 20;
slot_list = ds_list_create();

// 스프라이트 지정.
sprite[0] = Spr_7_Body; // 정지 스프라이트.
sprite[1] = Spr_7_Body; // 이동중 스프라이트.
sprite[2] = Spr_7_Body; // 공격 스프라이트.
sprite[3] = Spr_7_Body; // 공격중 스프라이트.
sprite_head[0] = Spr_7_Head;
sprite_head[1] = Spr_7_Head;
sprite_head[2] = Spr_7_Head;
sprite_head[3] = Spr_7_Head;
sprite_head_index = sprite_head[0];

// 쉐이더 시스템.
colour_to_find = shader_get_uniform(shader_set_colour, "f_Colour1");
colour_to_set = shader_get_uniform(shader_set_colour, "f_Colour2");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 제거.
event_inherited();

var _size = ds_list_size(slot_list);
for(var _i = 0; _i &lt; _size; _i ++)
{
    var _ins = ds_list_find_value(slot_list, _i);
    if (instance_exists(_ins) == true)
    {
        _ins.build = 2;
        _ins.move_x = x;
        _ins.move_y = y;
    }
}
ds_list_destroy(slot_list);

destroy.sprite[0] = sprite_index;
destroy.sprite_angle[0] = body_angle;
destroy.sprite[1] = sprite_head_index;
destroy.sprite_angle[1] = image_angle;
destroy.sprite_length[1] = 24;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 탑승물 스텝.
event_inherited();

if (global.lock_step == false)
{
    var _size = ds_list_size(slot_list);
    for(var _i = 0; _i &lt; _size; _i ++)
    {
        var _len = ((_i + 1) * 8);
        var _x = x + lengthdir_x(-(_len), body_angle);
        var _y = y + lengthdir_y(-(_len), body_angle);
        var _ins = ds_list_find_value(slot_list, _i);
        if (instance_exists(_ins) == true)
        {
            _ins.x = _x;
            _ins.y = _y;
            _ins.depth = depth - 1;
            if (_ins.attack_target == noone)
            {
                _ins.direction = image_angle;
            }
        } else {ds_list_delete(slot_list, _i);}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 포탑 회전.
event_inherited();

if (body_angle != direction)
&amp;&amp; (attack_target == noone)
{
    var _rotate = abs(direction - body_angle);
    var _rev = 1; if (_rotate &gt; 180) {_rev = -1;}
    var _spd = min(abs(360 - (direction - body_angle)), _rotate, abs(360 + (direction - body_angle))) / ((body_angle_speed * room_speed) / global.target_fps);
    body_angle += (sign(direction - body_angle) * _spd) * _rev;

    if(body_angle &gt; 359) {body_angle = 0;}
    if(body_angle &lt; 0) {body_angle = 359;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 내리기 시스템.
event_inherited();

if (global.lock_step == false)
&amp;&amp; (run_step_alarm == 0)
&amp;&amp; (action == 11)
{
    var _size = ds_list_size(slot_list);
    for(var _i = 0; _i &lt; _size; _i ++)
    {
        var _ins = ds_list_find_value(slot_list, _i);
        if (_ins != undefined) &amp;&amp; (instance_exists(_ins) == true)
        {
            _ins.build = 2;
            _ins.action = 0;
            _ins.move_x = x;
            _ins.move_y = y;
            slot_number -= _ins.slot;
        }
    }
    ds_list_clear(slot_list);
    action = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw.
if (view_xview[0] &lt;= bbox_right &amp;&amp; bbox_left &lt;= view_xview[0] + view_wview[0] &amp;&amp; view_yview[0] &lt;= bbox_bottom &amp;&amp; bbox_top &lt;= view_yview[0] + view_hview[0]) 
&amp;&amp; (ds_grid_get(Obj_Game_System.fog_grid, f_x, f_y) == 0)
&amp;&amp; (shader_is_compiled(shader_set_colour))
{
    shader_set(shader_set_colour);
    shader_set_uniform_f(colour_to_find, 1, 0, 0);       
    shader_set_uniform_f(colour_to_set, global.get_colour_rgb[set_colour, 0], global.get_colour_rgb[set_colour, 1], global.get_colour_rgb[set_colour, 2]); // R, G, B.
    draw_sprite_ext(sprite_index, image_index, floor(x), floor(y), image_xscale, image_yscale, body_angle, image_blend, image_alpha);
    
    var _len = -16;
    var _x = x + lengthdir_x(_len, image_angle);
    var _y = y + lengthdir_y(_len, image_angle);
    draw_sprite_ext(sprite_head_index, image_index, floor(_x), floor(_y), image_xscale, image_yscale, image_angle, image_blend, image_alpha); 
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
