<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>Obj_AI_System</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create.
event_inherited();
all_unit = ds_list_create();
attack_unit = ds_list_create();

// AI 변수.
center = noone; // 본진.
target_player = ai_target_serch(); // 공격할 대상.
action = 0; // 진행 순서.
build_x = 0;
build_y = 0;
oil_unit[1] = noone; // 가스 채취 유닛.
oil_unit[0] = noone;
repair_unit = noone; // 자동 수리 유닛.
safe_range = 320; // 건물 건설 거리입니다.
safe_range_plus = 64; // 건물 건설 거리 오바시 늘어날 거리.
serch_num_max = 8; // 건물 건설 위치 확인을 몇 번 하는지 설정합니다.

attack_switch = false;
attack_point = noone; // 공격가는 지점.

// 유닛 카운트.
_Obj_0 = 0;
_Obj_0_max = 0;
_Obj_1 = 0;
_Obj_1_max = 0;
_Obj_101 = 0;
_Obj_101_max = 0;
_Obj_102 = 0;
_Obj_102_max = 0;
_Obj_104 = 0;
_Obj_104_max = 0;
_Obj_106 = 0;
_Obj_106_max = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// AI 시작.
if (ai_step_alarm == 0)
{
    // 센터 지점 선정.
    if (center == noone)
    {
        with(Obj_100)
        {
            if (other.set_player == self.set_player)
            {
                ai_obj = other.id;
                other.center = self.id;
            }
        }
    }
    
    // 센터 지점이 있을 때 AI 실행.
    if (instance_exists(center) == true)
    {
        var _x = center.x, _y = center.y, _obj = noone, _ins = noone, _resource = noone, _building = noone;
        
        // 전투 유닛 행동 설정.
        var _size = ds_list_size(all_unit);
        for(var _i = 0; _i &lt; _size; _i ++)
        {
            var _ins = ds_list_find_value(all_unit, _i);
            if (_ins != undefined) &amp;&amp; (instance_exists(_ins) == true)
            {
                if (attack_switch == true)
                {
                    if (instance_exists(attack_point) == true)
                    {
                        action = 2;
                        move_x = attack_point.x;
                        move_y = attack_point.y;
                        moving = true;
                        attack_first = true;
                    }
                }
                else
                {
                    
                }
            }
            else
            {
                ds_list_delete(battle_unit, _i);
            }
            
        }
        attack_switch = false;
        
        // 자동 자원 채집.
        _obj = Obj_Ore;
        while(true)
        {
             _ins = instance_nearest(_x, _y, _obj);
             if (instance_exists(_ins) == true)
             &amp;&amp; (abs(_x - _ins.x) &lt;= safe_range) &amp;&amp; (abs(_y - _ins.y) &lt;= safe_range)
             {
                _resource = _ins;
                break;
             } else {instance_activate_all(); break;}
        }
        if (instance_exists(_resource) == true)
        {
            _obj = Obj_0;
            while(true)
            {
                _ins = collision_rectangle(_x - safe_range, _y - safe_range, _x + safe_range, _y + safe_range, _obj, false, true);
                if (instance_exists(_ins) == true)
                &amp;&amp; (abs(_x - _ins.x) &lt;= safe_range) &amp;&amp; (abs(_y - _ins.y) &lt;= safe_range)
                {
                   if (set_player == _ins.set_player)
                   &amp;&amp; (_ins.id != oil_unit[0]) &amp;&amp; (_ins.id != oil_unit[1]) &amp;&amp; (_ins.id != repair_unit)
                   &amp;&amp; (_ins.action == 0)
                   {
                       _ins.move_x = _resource.x;
                       _ins.move_y = _resource.y;
                       _ins.moving = true;
                       _ins.action = 9;
                       break;
                   } else {instance_deactivate_object(_ins);}
                } else {instance_activate_all(); break;}
            }        
        }
        
        // 자동 원유 채집.
        _resource = noone;
        _obj = Obj_101;

        if (global.get_resource[set_player, 0] - global.get_resource_value[set_player, 0] &gt;= 50)
        {
            while(true)
            {
                 _ins = instance_nearest(_x, _y, _obj);
                 if (instance_exists(_ins) == true)
                 &amp;&amp; (_ins.build == 2)
                 &amp;&amp; (abs(_x - _ins.x) &lt;= safe_range) &amp;&amp; (abs(_y - _ins.y) &lt;= safe_range)
                 {
                    if (_ins.resource_value &gt; 0)
                    {
                        _resource = _ins;
                        instance_activate_all(); break;
                    } else {oil_unit[0] = noone; oil_unit[1] = noone; instance_activate_all(); break;}
                 } else {instance_activate_all(); break;}
            }
            if (instance_exists(_resource) == true)
            {
                if (instance_exists(_resource.resource_id) == true)
                &amp;&amp; (_resource.resource_id != oil_unit[0])
                &amp;&amp; (_resource.resource_id != oil_unit[1])
                {
                    with(_resource.resource_id) 
                    {
                        action = 0;
                    }
                    _resource.resource_id = noone;
                }
                
                var _check = false;
                for(var _i = 0; _i &lt; 2; _i ++)
                {
                    var _ins = oil_unit[_i];
                    if (instance_exists(_ins) == false) {_check = true;}
                    else if (_ins.action != 9)  {_check = true;}
                    if (_check == true) {oil_unit[_i] = noone; break;}
                }
                if (_check == true)
                {
                    _obj = Obj_0;
                    while(true)
                    {
                        _ins = collision_rectangle(_x - safe_range, _y - safe_range, _x + safe_range, _y + safe_range, _obj, false, true);
                        if (instance_exists(_ins) == true)
                        &amp;&amp; (abs(_x - _ins.x) &lt;= safe_range) &amp;&amp; (abs(_y - _ins.y) &lt;= safe_range)
                        {
                           if (set_player == _ins.set_player)
                           &amp;&amp; (_ins.id != oil_unit[0]) &amp;&amp; (_ins.id != oil_unit[1]) &amp;&amp; (_ins.id != repair_unit)
                           &amp;&amp; ((_ins.action == 0) || (_ins.action == 9))
                           {
                               _ins.move_x = _resource.x;
                               _ins.move_y = _resource.y;
                               _ins.moving = true;
                               _ins.action = 9;
                               oil_unit[_i] = _ins.id;
                               instance_activate_all(); break;
                           } else {instance_deactivate_object(_ins);}
                        } else {instance_activate_all(); break;}
                    }        
                }
            }
        }
        else
        {
            if (instance_exists(oil_unit[0]) == true)
            {
                oil_unit[0].action = 0;
                oil_unit[0] = noone;
            }
            if (instance_exists(oil_unit[1]) == true)
            {
                oil_unit[1].action = 0;
                oil_unit[1] = noone;
            }
        }
        
        // 자동 건물 건설, 수리.
        _obj = Obj_Building;
        if (instance_exists(repair_unit) == false)
        {
            while(true)
            {
                 _ins = instance_nearest(_x, _y, _obj);
                 if (instance_exists(_ins) == true)
                 {
                    if (instance_exists(_ins.build_id) == false)
                    &amp;&amp; (abs(_x - _ins.x) &lt;= safe_range) &amp;&amp; (abs(_y - _ins.y) &lt;= safe_range)
                    &amp;&amp; ((_ins.build == 1) || (_ins.hp &lt; _ins.hp_max))
                    {
                        _building = _ins;
                        instance_activate_all(); break;
                    }
                    else {instance_deactivate_object(_ins);}
                 } else {instance_activate_all(); break;}
            }
            if (instance_exists(_building) == true)
            {
                _obj = Obj_0;
                while(true)
                {
                    _ins = collision_rectangle(_x - safe_range, _y - safe_range, _x + safe_range, _y + safe_range, _obj, false, true);
                    if (instance_exists(_ins) == true)
                    &amp;&amp; (abs(_x - _ins.x) &lt;= safe_range) &amp;&amp; (abs(_y - _ins.y) &lt;= safe_range)
                    {
                       if (set_player == _ins.set_player
                       &amp;&amp; (_ins.id != oil_unit[0]) &amp;&amp; (_ins.id != oil_unit[1]) &amp;&amp; (_ins.id != repair_unit))
                       &amp;&amp; ((_ins.action == 0) || (_ins.action == 9))
                       {
                           _ins.move_x = _building.x;
                           _ins.move_y = _building.y;
                           _ins.moving = true;
                           _ins.action = 8;
                           repair_unit = _ins;
                           instance_activate_all(); break;
                       } else {instance_deactivate_object(_ins);}
                    } else {instance_activate_all(); break;}
                }        
            }
        }
        else if (repair_unit.action != 8)
        {
            repair_unit = noone;
        }
    
        // 자동 일꾼 생산.
        _obj = Obj_0;
        if (_Obj_0 &lt; _Obj_0_max)
        &amp;&amp; (global.get_resource[set_player, 0] - global.get_resource_value[set_player, 0] &gt;= real(global.sight_table[return_csv_number(_obj), return_str_number("create_resource_1")]))
        &amp;&amp; (global.get_resource[set_player, 1] - global.get_resource_value[set_player, 1] &gt;= real(global.sight_table[return_csv_number(_obj), return_str_number("create_resource_2")]))
        &amp;&amp; (global.get_resource[set_player, 3] - global.get_resource_value[set_player, 3] &gt;= real(global.sight_table[return_csv_number(_obj), return_str_number("create_resource_3")]))
        {
            if (center.waiting[0] == noone)
            {
                center.action = 20;
            }
        }
        
        // 자동 보급고 추가.
        var _b_obj = Obj_102, _w_obj = Obj_0;
        if (_Obj_102 &lt; _Obj_102_max)
        &amp;&amp; (global.get_resource[set_player, 3] - global.get_resource_value[set_player, 3] &lt; global.max_farm)
        {
            ai_build_check(_x, _y, _b_obj, _w_obj);
        }
        
        // 자동 채취소 추가.
        var _b_obj = Obj_101, _w_obj = Obj_0;
        if (_Obj_101 &lt; _Obj_101_max)
        {
            ai_build_check(_x, _y, _b_obj, _w_obj);
        }
        
        // 자동 병영 추가.
        var _b_obj = Obj_104, _w_obj = Obj_0;
        if (_Obj_104 &lt; _Obj_104_max)
        {
            ai_build_check(_x, _y, _b_obj, _w_obj);
        }
        
        // 자동 주특기 훈련장 추가.
        var _b_obj = Obj_106, _w_obj = Obj_0;
        if (_Obj_106 &lt; _Obj_106_max)
        {
            ai_build_check(_x, _y, _b_obj, _w_obj);
        }
        
        // 자동 소총수 생산.
        var _b_obj = Obj_104, _w_obj = Obj_1;
        if (_Obj_1 &lt; _Obj_1_max)
        {
            while(true)
            {
                _ins = instance_nearest(_x, _y, _b_obj);
                if (instance_exists(_ins) == true)
                &amp;&amp; (abs(_x - _ins.x) &lt;= safe_range) &amp;&amp; (abs(_y - _ins.y) &lt;= safe_range)
                {
                    if (_ins.set_player == set_player)
                    &amp;&amp; (_ins.waiting[0] == noone)
                    {
                        _ins.action = return_action_number(_w_obj);
                        break;
                    } else {instance_deactivate_object(_ins);}
                } else {instance_activate_all(); break;}
            }
        }
        
        // AI 진행.
        switch(action)
        {
            case 0:
            {
                _Obj_0_max = 8;
                if (_Obj_0 &gt;= _Obj_0_max) // 일꾼 8기일 때.
                {
                    _Obj_102_max = 1; // 보급고 건설.
                    _Obj_104_max = 1; // 병영 1개 건설.
                    if (_Obj_104 &gt;= _Obj_104_max) // 병영 건설 시작할 때.
                    {
                        action ++;
                    }
                }
                break;
            }
            case 1:
            {
                _Obj_0_max = 12;
                if (_Obj_0 &gt;= 10) // 일꾼 10기일 때.
                {
                    _Obj_104_max = 2; // 병영 2개 건설.
                    _Obj_1_max = 12; // 소총수 12기 생산.
                    if (_Obj_104 &gt;= 2)
                    {
                        _Obj_102_max = 2; // 보급고 건설.
                        action ++;
                    } // 건설 시도하면 스킵.
                }
                break;
            }
            
            case 2:
            {
                _Obj_0_max = 14;
                if (_Obj_0 &gt;= _Obj_0_max) // 일꾼 14기일 때.
                {
                    _Obj_101_max = 1; // 가스 채취.
                    action ++;
                }
                break;
            }
            
            case 3:
            {
                if (_Obj_1 &gt;= 6)
                {
                    _Obj_106_max = 1; // 주특기 훈련장 건설.
                    _Obj_102_max = 3; // 보급고 건설.
                    action ++;
                }
                break;
            }
            case 4:
            {
                
                break;
            }
        }
    }
    ai_step_alarm = ai_step_alarm_max;
} else {ai_step_alarm --;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 디버그용.

draw_set_colour(c_white);
if (instance_exists(center) == true)
{
    var _x = center.x, _y = center.y;
    draw_rectangle(_x - safe_range, _y - safe_range, _x + safe_range, _y + safe_range, true); // 울타리 범위 표시.
    
    draw_set_font(font_gui_command); // 자원 표기.
    draw_set_halign(fa_center); draw_set_valign(fa_center);
    draw_text(_x, _y, global.get_resource[set_player, 0]);
    draw_text(_x, _y + 10, global.get_resource[set_player, 1]);
    draw_text(_x, _y + 20, string(global.get_resource[set_player, 2]) + " / " + string(global.get_resource[set_player, 3]));
    draw_text(_x, _y + 40, _Obj_0);
    draw_text(_x, _y + 60, string(_Obj_102) + " / " + string(_Obj_102_max));
    
    /*/ 시야 디버깅.
    with(Obj_Sight)
    {
        if (other.center.set_player == set_player)
        {
            var _index = ds_list_find_index(global.list_sight, id);
            if (_index == -1)
            {
                ds_list_add(global.list_sight, id);
            }
        }
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
