<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 색상 변수를 선언합니다.

for(var _i = 0; _i &lt; 12; _i ++)
{
    switch(_i)
    {
        case 0: draw_set_color(c_red); // 빨강색.
        global.get_colour_rgb[_i, 0] = 1;
        global.get_colour_rgb[_i, 1] = 0;
        global.get_colour_rgb[_i, 2] = 0;
        break;
        
        case 1: draw_set_color(c_blue); // 파랑색.
        global.get_colour_rgb[_i, 0] = 0;
        global.get_colour_rgb[_i, 1] = 0;
        global.get_colour_rgb[_i, 2] = 1;
        break;
        
        case 2: draw_set_color(c_lime); // 초록색.
        global.get_colour_rgb[_i, 0] = 0;
        global.get_colour_rgb[_i, 1] = 1;
        global.get_colour_rgb[_i, 2] = 0;
        break;
        
        case 3: draw_set_color(c_yellow); // 노랑색.
        global.get_colour_rgb[_i, 0] = 1;
        global.get_colour_rgb[_i, 1] = 1;
        global.get_colour_rgb[_i, 2] = 0;
        break;
        
        case 4: draw_set_color(c_orange); // 주황색.
        global.get_colour_rgb[_i, 0] = 1;
        global.get_colour_rgb[_i, 1] = 0.5;
        global.get_colour_rgb[_i, 2] = 0;
        break;
        
        case 5: draw_set_color(c_fuchsia); break; // 핑크색.
        case 6: draw_set_color(c_purple); break; // 보라색.
        case 7: draw_set_color(c_olive); break; // 황토색.
        case 8: draw_set_color(c_teal); break; // 하늘색.
        case 9: draw_set_color(c_white); break; // 하얀색.
        case 10: draw_set_color(c_gray); break; // 회색.
        case 11: draw_set_color(c_black); break; // 검정색.
        
        default: draw_set_color(c_white);
        global.get_colour_rgb[_i, 0] = 1;
        global.get_colour_rgb[_i, 1] = 1;
        global.get_colour_rgb[_i, 2] = 1;
        break; // 디폴트.
    }
    
    global.get_colour_draw[_i] = draw_get_colour();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 데이터 테이블화.
var _i_max = 255, _k_max = 31;
var _i = _i_max; repeat(_i_max + 1)
{
    _k = _k_max; repeat(_k_max + 1)
    {
        global.sight_table[_i, _k] = -1;
        _k --;
    }
    _i --;
}

var _file = file_text_open_read(working_directory + "data\sight_table.csv");
if (_file != -1)
{
    var _size = file_text_read_real(_file);
    file_text_readln(_file);
    for(var _i = 0; _i &lt; _size; _i ++)
    {
        var _string = file_text_read_string(_file);
        file_text_readln(_file);

        var _str = "";
        var _length = string_length(_string);
        var _main_index = -1;
        var _sub_index = 0;
        for(var _k = 0; _k &lt; _length; _k ++)
        {
            var _at = string_char_at(_string, _k + 1);
            if (_at == ",")
            {
                if (_main_index == -1)
                {
                    _main_index = real(_str);
                    _str = "";
                }
                else if (_str != "")
                {
                    global.sight_table[_main_index, _sub_index] = _str;
                    _str = "";
                    _sub_index ++;
                }
            }
            else
            {
                _str = string_insert(_str, _at, 0);
            }
        }
    }
    file_text_close(_file);
}
else 
{
    show_message_async("file not exist.");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 게임 시작할 때 필요한 변수들을 선언합니다.
randomize(); // 랜덤은 무조건 클라이언트에서 동기화에 지장이 없을 정도로만 사용.

// 기타.
global.target_fps = 60; // 목표 프레임.
global.object_string_size = 0.8;

// 사운드 변수.
global.set_bgm_volume = 100;
global.set_sound_volume = 100;
audio_channel_num(16);
audio_volume_set();

// 게임 중요 변수.
global.set_player = 0;
global.set_team = 0;
global.set_brood = 0;
global.set_colour = 0;

// 네트워크 변수.
global.have_server = false; // 방장인지 아닌지 구분하기 위한 변수.
global.buffer = -1;
global.socket = -1; // 소켓 부여시 사용할 소켓 변수.
global.socket_num = -1; // 서버 기준 소켓 번호를 플레이어에게 전송할 변수.
global.server_type = network_socket_tcp; // 접속할 타입.
global.connect_ip = "127.0.0.1"; // 연결할 IP 주소. (기본: 127.0.0.1)

// 서버.
global.tcp_server = -1; // NET TCP 변수.
global.broadcast_server = -1; // 브로드 캐스트 변수.

// 브로드 캐스트.
global.server_list = -1;
global.server_name = -1;

// 게임 플레이용.
global.list_player = -1;
global.list_name = -1;
global.list_ip = -1;
global.grid_ping = -1;

global.max_player = 8;
global.max_farm = 80;
var _i = 0; repeat(global.max_player)
{
    global.list_ping[_i] = -1; // [_i]에 있는 플레이어의 RTT를 계싼하여 넣습니다.
    global.get_player[_i] = -1; // [_i]에 있는 플레이어 지정 플레이어입니다.
    global.get_team[_i] = -1; // [_i]에 있는 플레이어의 지정 색입니다.
    global.get_brood[_i] = -1; // [_i]에 있는 플레이어의 지정 종족입니다.
    global.get_colour[_i] = -1; // [_i]에 있는 플레이어의 지정 색입니다.
    _i ++;
}
global.set_name = "Archer"; // 사용할 유저 이름.
global.set_server_name = "Come on my server!"; // 방 이름.

// 명령을 담을 list 구조체.
global.command = -1;

// 디스플레이 사이즈 조절.
display_set_gui_size(1280, 720);
global.draw_gui = true;

// 엡실론 설정.
math_set_epsilon(0.009);

// 페이드 인 아웃처리.
global.screen_fade_swtich = false;
global.screen_fade_alpha = 0;
global.screen_fade_speed = 0.02;

// 디버그용.
global.list_id = ds_list_create(); // 유닛 목록.
global.list_sight = ds_list_create(); // 시야 제공 목록.
global.list_sight_alarm = ds_list_create(); // 적군 타격시 임시 시야 제공 목록.
show_debug_overlay(false);

// 룸 이동.
room_goto(Room_Main_Screen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
