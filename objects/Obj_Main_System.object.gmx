<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UDP 서버 탐색을 위한 변수 선언입니다.

menu = 0; // 메뉴 화면.
pick_ip = noone; // 선택한 서버.
frame_rate = 0; // 프레임 레이트를 구합니다. 클라이언트간 RTT 계산에 사용합니다.

global.max_player = 6; // 방에 최대 몇 명이 들어올 수 있는지 나타냅니다.

global.buffer = buffer_create(1, buffer_grow, 1); // 데이터 전송용 버퍼.
global.socket = network_create_socket(global.server_type); // 사용할 소켓.
global.server_list = ds_list_create(); // 브로드 캐스트중 서버 리스트(IP) 불러오기.
global.server_name = ds_list_create(); // 브로드 캐스트중 서버 이름 불러오기.

global.chat = ds_list_create(); // 채팅 기록을 담을 자료 구조입니다.

// 방 접속시 모든 인원의 데이터를 받을 변수.
global.list_player = ds_list_create(); // 플레이어 고유 소켓 ID.
global.list_ip = ds_list_create(); // 플레이어 IP.
global.grid_ping = ds_grid_create(8, 2); // RTT를 계산할 자료 구조.
var _i = (global.max_player - 1); repeat(global.max_player) 
{
    global.list_ping[_i] = ds_list_create(); // RTT를 담을 공간.
    global.get_player[_i] = -1; // [_i]에 있는 플레이어 지정 플레이어입니다.
    global.get_team[_i] = -1; // [_i]에 있는 플레이어의 지정 색입니다.
    global.get_brood[_i] = -1; // [_i]에 있는 플레이어의 지정 종족입니다.
    global.get_colour[_i] = -1; // [_i]에 있는 플레이어의 지정 색입니다.
    global.get_resource[_i, 3] = 0;
    global.get_resource[_i, 2] = 0;
    global.get_resource[_i, 1] = 0;
    global.get_resource[_i, 0] = 100;
    global.get_resource_value[_i, 3] = 0;
    global.get_resource_value[_i, 2] = 0;
    global.get_resource_value[_i, 1] = 0;
    global.get_resource_value[_i, 0] = 0;
    global.get_name[_i] = "None"; 
    
    var _k = 255; repeat(255)
    {
        global.get_research[_i, _k] = false;
        global.get_building[_i, _k] = false;
        _k --;
    }
    _i --;
}
ds_grid_clear(global.grid_ping, noone); // 시작하기 전에 DS 그리드를 비워줍니다.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 캠페인을 위한 변수 선언입니다.
campaign_select_brood = -1; // 선택된 캠페인 종족.
campaign_select_stage = 0; // 선택된 캠페인 넘버.

// 캠페인 변수.
for(var _i = 2; _i &gt;= 0; _i --)
{
    for(var _k = 9; _k &gt;= 0; _k --)
    {
        global.campaign[_i, _k] = -1; // 앞은 종족, 뒤는 스테이지.
        global.campaign_string[_i, _k] = ""; // 각 캠페인의 이름.
    }
}

global.campaign_string[1, 0] = "재정비";
global.campaign_string_info[1, 0] = 
"전 인류가 하나가 되었다.";

global.campaign_string[1, 1] = "B";
global.campaign_string[1, 2] = "C";
global.campaign_string[1, 3] = "D";
global.campaign_string[1, 4] = "E";
global.campaign_string[1, 5] = "F";
global.campaign_string[1, 6] = "G";
global.campaign_string[1, 7] = "H";
global.campaign_string[1, 8] = "I";
global.campaign_string[1, 9] = "J";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 브금 재생.
audio_play_sound(Sou_Main_BGM, 0, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG START

global.have_server = true;
global.tcp_server = 0;
global.get_player[0] = 0;
global.get_team[0] = 0;
global.get_brood[0] = 0;
global.get_colour[0] = 0;

if (ds_list_find_index(global.list_player, global.tcp_server) == -1)
{
    ds_list_add(global.list_player, global.tcp_server);
}

global.get_player[1] = 100;
global.get_team[1] = 1;
global.get_brood[1] = 0;
global.get_colour[1] = 1;
                                        
room_goto(Room_Metas_Campaign_1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 방 정보를 브로드 캐스트에 전송합니다.
if (menu == 2)
{
    if(global.have_server == true)
    {
        // 로비에 방 정보 넘기기.
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_string, global.set_server_name);
        network_send_broadcast(global.tcp_server, 6511, global.buffer, buffer_tell(global.buffer));
        
        if (global.tcp_server &gt;= 0)
        {
            // 방에 정보 넘기기.
            var _player_max = ds_list_size(global.list_player);
            buffer_seek(global.buffer, buffer_seek_start, 0);
            buffer_write(global.buffer, buffer_u8, 1);
            buffer_write(global.buffer, buffer_u32, frame_rate); // RTT 계산.
            buffer_write(global.buffer, buffer_u8, _player_max); // 플레이어 목록.
            for(var _i = 0; _i &lt; _player_max; _i ++)
            {
                var _value = ds_list_find_value(global.list_player, _i);
                buffer_write(global.buffer, buffer_u8, _value);
                var _value = ds_list_find_value(global.list_ip, _i);
                buffer_write(global.buffer, buffer_string, _value);
            }
            
            buffer_write(global.buffer, buffer_u8, global.max_player);
            for(var _i = 0; _i &lt; global.max_player; _i ++)
            {
                buffer_write(global.buffer, buffer_s8, global.get_player[_i]);
                buffer_write(global.buffer, buffer_s8, global.get_team[_i]);
                buffer_write(global.buffer, buffer_s8, global.get_brood[_i]);
                buffer_write(global.buffer, buffer_s8, global.get_colour[_i]);
                buffer_write(global.buffer, buffer_string, global.get_name[_i]);
                
            }
            for (var _i = 0; _i &lt; _player_max; _i ++)
            {
                var _player = ds_list_find_value(global.list_player, _i);
                network_send_packet(_player, global.buffer, buffer_tell(global.buffer));
                
                if (ds_grid_get(global.grid_ping, _player, 0) == noone)
                {
                    ds_grid_set(global.grid_ping, _player, 0, frame_rate);
                }
            }
        }
    }
    
    alarm[0] = 6;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UDP 서버 탐색.

var _id = ds_map_find_value(async_load, "id"); // 이벤트가 발생한 ID.
var _socket = ds_map_find_value(async_load, "socket"); // 소켓 고유 번호.

if(_id == global.broadcast_server) // 브로드 캐스트에서 발생한 이벤트일 경우.
{
    // 브로드 캐스트에서 발생한 이벤트로는 접속중인 클라이언트들의 정보를 async_load에 기록합니다.
    // IP: 클라이언트의 IP를 가지고 옵니다.
    // BUFFER: 클라이언트의 데이터를 가지고 옵니다.
    
    var _ip = ds_map_find_value(async_load, "ip"); // 아이피를 가지고 옵니다.

    // 버퍼 데이터를 받아옵니다.
    var _buff = ds_map_find_value(async_load, "buffer");
    var _name = buffer_read(_buff, buffer_string);

    // 서버 리스트 구조체에 해당 IP가 있는지 확인합니다.
    var _index = ds_list_find_index(global.server_list, _ip); 
    // 없으면 -1을, 있으면 해당하는 0 이상의 숫자를 반환합니다.
    
    if(_index &lt; 0) // index가 -1인 경우. (없을 경우)
    {
        ds_list_add(global.server_list, _ip);
        ds_list_add(global.server_name, _name);
        // 없을 경우 리스트에 데이터를 집어넣습니다.
    }    
}

else // TCP에서 발생한 이벤트일 경우.
{
    if(global.have_server == true) // 서버 방장일 경우.
    {
        switch(ds_map_find_value(async_load, "type"))
        {
            case network_type_connect: // 접속시에 미리 IP만 받아놈.
            {
                var _ip = ds_map_find_value(async_load, "ip");
                var _check = ds_list_find_index(global.list_player, _socket);
                if (_check == -1)
                {
                    for (var _i = 0; _i &lt; global.max_player; _i ++)
                    {
                        if (global.get_player[_i] == -1) // 자리가 있을 경우.
                        {
                            global.get_player[_i] = _socket; // 박스안에 소켓.
                            global.get_team[_i] = _socket;
                            global.get_brood[_i] = 0;
                            global.get_colour[_i] = _socket;
                            global.get_name[_i] = "Loading";
                            
                            ds_list_add(global.list_player, _socket); // 소켓 리스트.
                            ds_list_add(global.list_ip, _socket); // IP 리스트.
        
                            buffer_seek(global.buffer, buffer_seek_start, 0);
                            buffer_write(global.buffer, buffer_u8, 0);
                            buffer_write(global.buffer, buffer_u8, _socket);
                            network_send_packet(_socket, global.buffer, buffer_tell(global.buffer));
                            break;
                        }
                    }
                }
                break;
            // 동일한 소켓 이용자일 경우에 추방.
            // 추방 함수.
            }
            
            case network_type_disconnect: // 퇴장시에.
            {
                var _ip = ds_map_find_value(async_load, "ip");
                var _check = ds_list_find_index(global.list_player, _socket);
                
                if (_check == -1) // 입력되지 않은 이용자가 나갔을 경우.
                {
                
                }
                else // 소켓 이용자가 일치할 경우에 데이터 정리.
                {
                    for (var _i = 0; _i &lt; global.max_player; _i ++)
                    {
                        if (global.get_player[_i] == _socket) // 자리가 있을 경우.
                        {
                            global.get_player[_i] = -1;
                            global.get_team[_i] = -1;
                            global.get_brood[_i] = -1;
                            global.get_colour[_i] = -1;
                            global.get_name[_i] = "None";
                            
                            ds_list_delete(global.list_player, _check);
                            ds_list_delete(global.list_ip, _check);
                            break;
                        }   
                    }
                }
                break;
            }
            
            case network_type_data: // 데이터 받을 시에.
            {
                var _read_buffer = ds_map_find_value(async_load, "buffer");
                switch(buffer_read(_read_buffer, buffer_u8)) // 데이터 역할 구별.
                {
                    case 0: // 플레이어 이름 받기.
                    {
                        var _name = buffer_read(_read_buffer, buffer_string);
                        for (var _i = 0; _i &lt; global.max_player; _i ++)
                        {
                            if (global.get_player[_i] == _id) // 자리에 있을 경우.
                            {
                                global.get_name[_i] = _name;
                            }
                        }
                        break;
                    }
                    
                    case 1:
                    {
                        if (ds_grid_get(global.grid_ping, _id, 0) != noone)
                        {
                            ds_grid_set(global.grid_ping, _id, 1, frame_rate);
                            
                            var _t1 = ds_grid_get(global.grid_ping, _id, 0);
                            var _t2 = ds_grid_get(global.grid_ping, _id, 1);
                            var _value = _t2 - _t1; if (_value &gt;= 6) {_value = 6;}
                            ds_grid_set(global.grid_ping, _id, 0, noone);
                            ds_grid_set(global.grid_ping, _id, 1, noone);
                            
                            if (ds_list_size(global.list_ping[_id]) &gt;= 20)
                            {
                                ds_list_delete(global.list_ping[_id], 20);
                            }
                            ds_list_insert(global.list_ping[_id], 0, _value);
                        }    
                        break;
                    }
                }
                break;
            }
        }
    }
    else // 클라이언트.
    {
         switch(ds_map_find_value(async_load, "type"))
         {
            case network_type_data:
            {
                var _read_buffer = ds_map_find_value(async_load, "buffer");
                switch(buffer_read(_read_buffer, buffer_u8))
                {
                    case 0: // 처음 접속할 시 설정 및 이름 보내주기.
                    {
                        global.socket_num = buffer_read(_read_buffer, buffer_u8);
                        
                        buffer_seek(global.buffer, buffer_seek_start, 0);
                        buffer_write(global.buffer, buffer_u8, 0);
                        buffer_write(global.buffer, buffer_string, global.set_name);
                        network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
                        break;
                    }
                    case 1: // 방 정보 불러오기.
                    {
                        ds_list_clear(global.list_player);
                        ds_list_clear(global.list_ip);
                        
                        frame_rate =  buffer_read(_read_buffer, buffer_u32);
                        
                        var _player_max = buffer_read(_read_buffer, buffer_u8);
                        for(var _i = 0; _i &lt; _player_max; _i ++)
                        {
                            var _list_id = global.list_player;
                            var _value = buffer_read(_read_buffer, buffer_u8);
                            if (_value != ds_list_find_value(_list_id, _i))
                            {
                                if (undefined == ds_list_find_value(_list_id, _i))
                                {ds_list_add(_list_id, _value); }
                                else
                                {ds_list_replace(_list_id, _i, _value);}
                            }
                            var _list_id = global.list_ip;
                            var _value = buffer_read(_read_buffer, buffer_string);
                            if (_value != ds_list_find_value(_list_id, _i))
                            {
                                if (undefined == ds_list_find_value(_list_id, _i))
                                {ds_list_add(_list_id, _value); }
                                else
                                {ds_list_replace(_list_id, _i, _value);}
                            }
                        }
                        
                        global.max_player = buffer_read(_read_buffer, buffer_u8);
                        for(var _i = 0; _i &lt; global.max_player; _i ++)
                        {
                            global.get_player[_i] = buffer_read(_read_buffer, buffer_s8);
                            global.get_team[_i] = buffer_read(_read_buffer, buffer_s8);
                            global.get_brood[_i] = buffer_read(_read_buffer, buffer_s8);
                            global.get_colour[_i] = buffer_read(_read_buffer, buffer_s8);
                            global.get_name[_i] = buffer_read(_read_buffer, buffer_string);
                        }
                        
                        buffer_seek(global.buffer, buffer_seek_start, 0); 
                        buffer_write(global.buffer, buffer_u8, 1);
                        network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
                        break;
                    }
                    case 2: // 게임 시작.
                    {
                        var _ran = buffer_read(_read_buffer, buffer_u64);
                        random_set_seed(_ran);
                        room_goto(Room_Metas_Campaign_1);
                        //room_goto(Room_TEST);
                        break;
                    }
                }
                break;
            }
         }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 해제.
if (global.buffer != -1) {buffer_delete(global.buffer);}
if (global.tcp_server != -1) {network_destroy(global.tcp_server);}
if (global.broadcast_server != -1) {network_destroy(global.broadcast_server);}
if (global.server_list != -1) {ds_list_destroy(global.server_list);}
if (global.server_name != -1) {ds_list_destroy(global.server_name);}
if (global.list_player != -1) {ds_list_destroy(global.list_player);}
if (global.list_name != -1) {ds_list_destroy(global.list_name);}
if (global.list_ip != -1) {ds_list_destroy(global.list_ip);}
if (global.grid_ping != -1) {ds_grid_destroy(global.grid_ping);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>Obj_Main_System</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 마우스 선언.
var _i = 0;
mbc_L = device_mouse_check_button(_i, mb_left);
mbp_L = device_mouse_check_button_pressed(_i, mb_left);
mbr_L = device_mouse_check_button_released(_i, mb_left);
mx_gui = device_mouse_x_to_gui(_i);
my_gui = device_mouse_y_to_gui(_i);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 메인 화면.
if (menu == 0)
{
    draw_set_alpha(1);
    draw_set_colour(c_white);

    draw_sprite(Spr_Main_Background, 0, 0, 0); // 백그라운드를 그립니다.
    
    for (var _i = 0; _i &lt; 3; _i ++) // 버튼 3개를 드로우하기 위해 반복문을 선언했습니다.
    {
        var _col = c_white; // 눌렀을 경우 색을 바꿔 눌렀다는 표시를 해줍니다.
        var _spr = noone; // 드로우할 이미지입니다.
        var _x = 0, _y = 0; // 이미지 좌표입니다.
        var _w = 0, _h = 0; // 이미지 크기입니다.
        var _x_icon = 0, _y_icon = 0; // 아이콘 좌표입니다.
        var _x_string = 0, _y_string = 0, _string = ""; // 텍스트 좌표입니다.
        if (_i == 0)
        {   
            _spr = Spr_Main_Box_1;
            _w = sprite_get_width(_spr);
            _h = sprite_get_height(_spr);
            _x = 288;
            _y = 98;
            _x_icon = _x + 72;
            _y_icon = _y + 50;
            _x_string = _x_icon + 200;
            _y_string = _y_icon + 8;
            _string = "Campaign Play";
        }
        else if (_i == 1)
        {
            _spr = Spr_Main_Box_2;
            _w = sprite_get_width(_spr);
            _h = sprite_get_height(_spr);
            _x = 440;
            _y = 272;
            _x_icon = _x + 48;
            _y_icon = _y + 34;
            _x_string = _x_icon + 184;
            _y_string = _y_icon + 4;
            _string = "Muiti Play";
        }
        else if (_i == 2)
        { 
            _spr = Spr_Main_Box_3;
            _w = sprite_get_width(_spr);
            _h = sprite_get_height(_spr);
            _x = 326;
            _y = 420;
            _x_icon = _x + 56;
            _y_icon = _y + 40;
            _x_string = _x_icon + 168;
            _y_string = _y_icon + 4;
            _string = "Setting";
        }
        
        if (mbc_L == true) // 눌렀을 때 눌렀다는 효과 보여주기.
        &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
        {
            _col = c_gray;
        }
        
        if (mbr_L == true) // 버튼 실행.
        &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
        {
            switch (_i)
            {
                case 0:
                {
                    mbr_L = false;
                    menu = 3;
                    break;
                }
                case 1:
                {
                    global.broadcast_server = network_create_server(network_socket_udp, 6511, 100); // NET 브로드 캐스트 함수.
                    menu = 1;
                    break;
                }
            }
        }
        
        draw_sprite_ext(_spr, 0, _x, _y, 1, 1, 0, _col, 1);
        draw_sprite_ext(Spr_Main_Box_Icon, _i, _x_icon, _y_icon, 1, 1, 0, _col, 1);
        if (shader_is_compiled(shader_set_font) == true)
        {
            shader_set(shader_set_font);        
            shader_enable_corner_id(true);
            
            var _font = font_main_string; draw_set_font(_font);
            var _font = font_get_texture(_font);
            var _texel_width = texture_get_texel_width(_font);
            var _texel_height = texture_get_texel_height(_font);
            var _texture = shader_get_uniform(shader_set_font, "v_TexturePixelSize");
            shader_set_uniform_f(_texture, _texel_width, _texel_height);
            
            draw_set_halign(fa_left); draw_set_valign(fa_top);
            draw_text_colour(_x_string, _y_string, _string, _col, _col, _col, _col, 1);
            
            shader_reset();
            shader_enable_corner_id(false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 로비 화면.
if (menu == 1)
{
    draw_set_alpha(1);
    draw_set_colour(c_white);

    draw_sprite(Spr_Main_Background, 0, 0, 0);
    draw_sprite(Spr_Background_Image, 0, 0, 0);
    draw_sprite(Spr_Message_Background, 0, 92, 500);
    
    // 브로드 캐스트로 받는 방 정보를 표기합니다.
    var _x = 120, _y = 208;
    var _count = ds_list_size(global.server_list); // 서버 수.
    for(var _i = 0; _i &lt; _count; _i ++) // 서버 수만큼 반복.
    {
        var _ip = ds_list_find_value(global.server_list, _i); // 해당 순번의 IP.
        var _name = ds_list_find_value(global.server_name, _i); // 해당 순번의 이름.
        var _string = (string(_ip) + "   " + string(_name)); /// 텍스트.
        var _w = string_width(_string); // 텍스트 가로 크기.
        var _h = string_height(_string); // 텍스트 세로 크기.
        
        if (mbr_L == true) // 텍스트를 눌렀을 경우.
        &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
        {
            if (pick_ip == _i)
            {
                mx_gui = 1138;
                my_gui = 434;
                break;
            }
            pick_ip = _i; // 선택한 서버를 가지고 온다.
        }
        
        if (pick_ip == _i) // 선택된 서버일 경우.
        {
            draw_rectangle(_x, _y, _x + _w, _y + _h, true);
        }
        
        if (shader_is_compiled(shader_set_font) == true)
        {
            shader_set(shader_set_font);        
            shader_enable_corner_id(true);
            
            var _font = font_lobby_string; draw_set_font(_font);
            var _font = font_get_texture(_font);
            var _texel_width = texture_get_texel_width(_font);
            var _texel_height = texture_get_texel_height(_font);
            var _texture = shader_get_uniform(shader_set_font, "v_TexturePixelSize");
            shader_set_uniform_f(_texture, _texel_width, _texel_height);
            
            draw_set_halign(fa_left); draw_set_valign(fa_top);
            draw_text(_x, _y, _string);
            
            if (_i == 0)
            {
                draw_text(120, 170, "IP / GAME NAME");
            }
            
            shader_reset();
            shader_enable_corner_id(false);
        }
    
        _y += (_h + (_h / 2)); // 글자 만큼 높이 추가.
    }
    
    for(var _i = 0; _i &lt; 4; _i ++) // 아래 GUI 버튼을 그립니다.
    {
        var _col = c_white;
        var _spr = Spr_Lobby_Button;
        var _w = sprite_get_width(_spr); _h = sprite_get_height(_spr); // 접속 버튼.
        var _x = 1137; _y = 184 + (_i * (_h + 10));
        var _spr_icon = Spr_Lobby_Icon;
        var _icon_x = _x + 4, _icon_y = _y - 4;
        
        if (mbc_L == true)
        &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
        {
            _col = c_gray;
        }
        
        if (mbr_L == true) 
        &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
        {
            mbr_L = false;
            switch(_i)
            {
                case 0: // 새로고침.
                {
                    ds_list_clear(global.server_list);
                    ds_list_clear(global.server_name);
                    pick_list = noone;
                    
                    network_destroy(global.broadcast_server);
                    global.broadcast_server = network_create_server(network_socket_udp, 6511, 100);
                    break;
                } 
                
                case 1: // 서버 생성.
                {
                    global.tcp_server = network_create_server(global.server_type ,6510, 8);
                    
                    // 서버 생성에 실패했을 경우 0 미만의 수를 반환합니다.
                    if(global.tcp_server &lt; 0) // 실패.
                    {    
                        show_message("방 생성에 문제가 있습니다.");
                    }
                    else // 생성 성공.
                    {
                                        // AI 설정. ((((((((((임시)))))))))))))
                                        global.get_player[3] = 100;
                                        global.get_team[3] = 3;
                                        global.get_brood[3] = 0;
                                        global.get_colour[3] = 3;
                        global.have_server = true; // 방장 표기.
                        global.connect_ip = "127.0.0.1"; // 자신의 IP 서버.
                        network_destroy(global.broadcast_server);
                        global.broadcast_server = -1; // 브로드 캐스트 종료.
                        
                        ds_list_add(global.list_player, global.tcp_server);
                        ds_list_add(global.list_ip, global.connect_ip);
                        global.get_player[0] = global.tcp_server;
                        global.get_team[0] = 0;
                        global.get_brood[0] = 0;
                        global.get_colour[0] = 0;
                        global.get_name[0] = global.set_name;
                        
                        alarm[0] = 6; // 6 프레임 주기마다 브로드 캐스트 전송.
                        menu = 2; // 방으로 이동.
                        break;
                    }
                    break;
                }
                
                case 2: // 서버 참가.
                {
                    if (pick_ip != noone) // 선택한 방이 있을 경우.
                    {
                        // 선택한 서버의 정보를 불러옵니다.
                        var _list = ds_list_find_value(global.server_list, pick_ip);
                        var _name = ds_list_find_value(global.server_name, pick_ip);
                        
                        global.connect_ip = _list; // 연결하는 IP와 서버가 같을 경우에.
                        //network_set_timeout
                        // 소켓 생성 후에 참여를 진행합니다.
                        var _connect = network_connect(global.socket, global.connect_ip, 6510);
                        if(_connect != 0) // 접속 실패.
                        {
                            show_message("접속 실패");
                        }
                        else // 서버에 접속 성공.
                        {
                            global.tcp_server = 1; // TCP 사용중.
                            network_destroy(global.broadcast_server); 
                            global.broadcast_server = -1; // 브로드 캐스트 종료.
                            menu = 2; // 방 화면으로 이동.
                        }
                    }
                    else // 선택된 방이 없을 경우에 출력.
                    {
                        show_message("선택된 방이 없습니다.");
                    }
                    break;
                }

                case 3: // 나가기.
                {
                    network_destroy(global.broadcast_server);
                    global.broadcast_server = -1; // 브로드 캐스트 종료.
                    pick_list = noone; //
                    menu = 0; // 메인 화면으로 이동.
                    break;
                }
            }
        }
        
        draw_sprite_ext(_spr, 0, _x, _y, 1, 1, 0, _col, 1);
        draw_sprite_ext(_spr_icon, _i, _icon_x, _icon_y, 1, 1, 0, _col, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 대기실 화면.
if (menu == 2)
{
    draw_sprite(Spr_Main_Background, 0, 0, 0);
    draw_sprite(Spr_Background_Image, 0, 0, 0);
    draw_sprite(Spr_Message_Background, 0, 92, 500);
    draw_sprite(Spr_Map_Info, 0, 852, 166);
    
    var _x = 0, _y = 0;
    draw_set_colour(c_lime);
    draw_text(_x, _y, ds_list_size(global.list_player)); // 대기실 총 인원.
    
    var _spr_w = sprite_get_width(Spr_Large_Box);
    var _spr_h = sprite_get_height(Spr_Large_Box);
    var _spr_s_w = sprite_get_width(Spr_Small_Box);
    var _spr_s_h = sprite_get_height(Spr_Small_Box);
    draw_set_halign(fa_left); draw_set_valign(fa_center);
    draw_set_font(font_wait_string);
    for(var _i = 0; _i &lt; global.max_player; _i ++)
    {
        draw_set_colour(c_lime);
        
        var _x = 152,  _y = 182 + (_i * _spr_h);
        draw_sprite(Spr_Large_Box, 0, _x, _y);
        
        _x = 162;
        draw_text(_x, _y + (_spr_h / 2), global.get_name[_i]);
        
        _x = 112;
        draw_text(_x, _y + (_spr_h / 2), global.get_player[_i]);
        
        _x = 280;
        draw_text(_x, _y + (_spr_h / 2), global.socket);
        
        _x = 152 + _spr_w;
        draw_sprite(Spr_Small_Box, 0, _x, _y);
        draw_text(_x + 19, _y + (_spr_h / 2), global.get_team[_i]);
        
        _x += 50;
        draw_sprite(Spr_Small_Box, 0, _x, _y);
        if (global.get_brood[_i] != -1)
        {
            draw_sprite(Spr_Brood_Flag, global.get_brood[_i], _x, _y);
        }
        
        _x += 50; 
        draw_sprite(Spr_Small_Box, 0, _x, _y);
        var _col = c_white;
        if (global.get_colour[_i] != -1) {_col = global.get_colour_draw[global.get_colour[_i]];}
        draw_set_colour(_col);
        var _size = 16;
        draw_rectangle(_x + _size, _y + _size, _x - _size + _spr_s_w, _y - _size + _spr_s_h, false);
    }
    
    for(var _i = 0; _i &lt; 2; _i ++) // 아래 GUI 버튼을 그립니다.
    {
        var _col = c_white;
        var _spr = Spr_Lobby_Button;
        var _w = sprite_get_width(_spr); _h = sprite_get_height(_spr); // 접속 버튼.
        var _x = 1137; _y = 404 + (_i * (_h + 10));
        var _spr_icon = Spr_Lobby_Icon;
        var _icon_x = _x + 4, _icon_y = _y - 4;
        
        if (mbc_L == true) // 텍스트를 눌렀을 경우.
        &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
        {
            _col = c_gray;
        }
        
        if (mbr_L == true) // 텍스트를 눌렀을 경우.
        &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
        {
            mbr_L = false;
            if (global.have_server == false)
            &amp;&amp; (_i == 0) {continue;}
                             
            switch(_i)
            {
                case 0:
                {
                    var _ran = random_get_seed();
                    buffer_seek(global.buffer, buffer_seek_start, 0);
                    buffer_write(global.buffer, buffer_u8, 2);
                    buffer_write(global.buffer, buffer_u64, _ran);
                    for (var _i = 0; _i &lt; ds_list_size(global.list_player); _i ++)
                    {
                        var _player = ds_list_find_value(global.list_player, _i);
                        network_send_packet(_player, global.buffer, buffer_tell(global.buffer));
                    }
                    random_set_seed(_ran);
                    room_goto(Room_Metas_Campaign_1);
                    //room_goto(Room_TEST);
                    break;
                }
                case 1:
                {
                    if (global.have_server == true)
                    {
                        global.connect_ip = -1;
                        ds_list_clear(global.list_player);
                        ds_list_clear(global.list_ip);
                        network_destroy(global.tcp_server);
                        global.have_server = false;
                        global.tcp_server = -1;

                        global.broadcast_server = network_create_server(network_socket_udp, 6511, 100);
                        menu = 1;
                    }
                    else
                    {
                        global.connect_ip = -1;
                        ds_list_clear(global.list_player);
                        ds_list_clear(global.list_ip);
                        network_destroy(global.socket);
                        global.socket = network_create_socket(global.server_type);
                        global.tcp_server = -1;
                        
                        global.broadcast_server = network_create_server(network_socket_udp, 6511, 100);
                        menu = 1;
                    }
                    break;
                }
                
            }
        }

        draw_sprite_ext(_spr, _i + 2, _x, _y, 1, 1, 0, _col, 1);
        draw_sprite_ext(_spr_icon, _i + 2, _icon_x, _icon_y, 1, 1, 0, _col, 1);
    }
    

    /*var _size = ds_list_size(global.list_player);
    for(var _i = 0; _i &lt; 8; _i ++)
    {
        var _x = 10;
        var _y = 80 + (_i * 60);
        var _ip = ds_list_find_value(global.list_ip, _i);
        var _name = ds_list_find_value(global.list_name, _i);
        var _player = ds_list_find_value(global.list_player, _i);
        draw_text(_x, _y, _name);
        draw_text(_x + 200, _y, _player);
        draw_text(_x + 400, _y, _ip);
        
        if (ds_list_find_value(global.list_player, _i) == global.set_player)
        {
            draw_circle(_x + 600, _y, 30, false);
        }
        
        var _text = 0;
        if(_player != undefined)
        {
            var _size = ds_list_size(global.list_ping[_player]);
            var _sum = 0;
            for(var _k = 0; _k &lt; _size; _k ++)
            {
                _sum += ds_list_find_value(global.list_ping[_player], _k);
            }
            _sum = _sum / _size;
            
            var _text = _sum;
        }
        draw_text(_x + 800, _y, _text);
    }*/
    
    //draw_set_colour(c_red);
    //draw_text(30, 10, frame_rate);
    
    //frame_rate ++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 켐페인 화면.
if (menu == 3)
{   
    global.have_server = true; // 방장 표기.
    global.tcp_server = 0;
    global.get_player[0] = 0;
    global.get_team[0] = 0;
    global.get_brood[0] = 0;
    global.get_colour[0] = 0;
    if (ds_list_find_index(global.list_player, global.tcp_server) == -1)
    {ds_list_add(global.list_player, global.tcp_server);}
    
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_sprite(Spr_Main_Background, 0, 0, 0); // 백그라운드를 그립니다.
    
    if (campaign_select_brood == -1)
    {
        var _x = 0, _y = 0;
        var _h_size = 48;
        var _w = 320;
        var _h = display_get_gui_height() - _h_size;
        for (var _i = 0; _i &lt; 3; _i ++) // 버튼 3개를 드로우하기 위해 반복문을 선언했습니다.
        {
            _x = 48 + ((_w + 48) * _i);
            _y = _h_size;
            draw_sprite(Spr_Campaign_Illust, _i, _x, _y);
            
            if (mbc_L == true)
            &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
            {
                _col = c_gray;
            }
            
            if (mbr_L == true) 
            &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
            {
                campaign_select_brood = _i;
                campaign_select_stage = 0;
            }
        }
    }
    else // 스테이지 선택.
    {
        // 백그라운드 이미지.
        draw_set_colour(c_dkgray);
        draw_rectangle(48, 48, 1104, 672, false);
        draw_set_colour(c_white);
        draw_rectangle(48, 48, 1104, 672, true);
        draw_line(448, 48, 448, 672);
        draw_line(48, 112, 448, 112);
        
        shader_set(shader_set_font);        
        shader_enable_corner_id(true);
        var _font = font_string; draw_set_font(_font);
        var _font = font_get_texture(_font);
        var _texel_width = texture_get_texel_width(_font);
        var _texel_height = texture_get_texel_height(_font);
        var _texture = shader_get_uniform(shader_set_font, "v_TexturePixelSize");
        shader_set_uniform_f(_texture, _texel_width, _texel_height);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_text(52, 52, "임무 선택");
        
        // 스트링.
        for(var _m = 0; _m &lt; 10; _m ++)
        {
            var _string = global.campaign_string[campaign_select_brood, _m];
            var _w = string_width(_string);
            var _h = string_height(_string);
            var _x = 52;
            var _y = 128 + (_h * _m);

            draw_text(_x, _y, _string);

            if (mbr_L == true) 
            &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
            {
                campaign_select_stage = _m;
            }
            
            if (campaign_select_stage == _m)
            {
                draw_rectangle(_x, _y, _x + _w, _y + _h, true);
            }
        }
    }
    shader_reset();
    
    // 우측에 GUI 버튼을 그립니다.
    for(var _i = 2; _i &lt; 4; _i ++) 
    {
        var _col = c_white;
        var _spr = Spr_Lobby_Button;
        var _w = sprite_get_width(_spr); _h = sprite_get_height(_spr); // 접속 버튼.
        var _x = 1137; _y = 184 + (_i * (_h + 10));
        var _spr_icon = Spr_Lobby_Icon;
        var _icon_x = _x + 4, _icon_y = _y - 4;
        
        if (mbc_L == true)
        &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
        {
            _col = c_gray;
        }
        
        if (mbr_L == true) 
        &amp;&amp; (_x &lt; mx_gui &amp;&amp; _y &lt; my_gui &amp;&amp; mx_gui &lt; _x + _w &amp;&amp; my_gui &lt; _y + _h)
        {
            mbr_L = false;
            switch(_i)
            {
                case 2: 
                {
                    if (campaign_select_brood != -1)
                    {
                        switch(campaign_select_brood)
                        {
                            case 1: 
                            {
                                switch(campaign_select_stage)
                                {
                                    case 0: 
                                    {
                                        // AI 설정.
                                        global.get_player[1] = 100;
                                        global.get_team[1] = 1;
                                        global.get_brood[1] = 0;
                                        global.get_colour[1] = 1;
                                        
                                        room_goto(Room_Metas_Campaign_1);
                                        break;
                                    }
                                }
                                break;
                            }
                            case 0: break;
                            case 2: break;
                        }
                    }
                    break;
                }
                case 3: 
                if (campaign_select_brood != -1)
                {
                    campaign_select_brood = -1;
                }
                else
                {
                    if (ds_list_find_index(global.list_player, global.tcp_server) != -1)
                    {ds_list_delete(global.list_player, global.tcp_server);}
                    global.have_server = false;
                    menu = 0;
                }
                break;
            }
        }
        
        draw_sprite_ext(_spr, 0, _x, _y, 1, 1, 0, _col, 1);
        draw_sprite_ext(_spr_icon, _i, _icon_x, _icon_y, 1, 1, 0, _col, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
