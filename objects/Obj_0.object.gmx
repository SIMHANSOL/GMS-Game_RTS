<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_0_Stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_Unit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 설정.
event_inherited();

// 사용자가 지정해줘야 하는 변수.
number = 0; // 유닛 번호.

// 건물 건설 관련.
build_obj = noone;
build_target = noone;

// 자원 채집 관련.
resource_menu = noone; // -4 없음, 0: 광물, 1: 오일.
resource_get = false; // 자원을 갖고 있는지 확인.
resource_get_value[0] = 10; // 광물 채집양.
resource_get_value[1] = 10; // 오일 채집양.
resource_time = 0;
resource_time_max = (4 * room_speed); // 자원 채집 시간.
resource_serch_range = 320;

// 스프라이트 지정.
sprite[0] = Spr_0_Stand; // 스태드 스프라이트.
sprite[1] = Spr_0_Move; // 이동중 스프라이트.
sprite[2] = Spr_0_Attack; // 자원 채집 스프라이트.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 없는 행동이 온 됬을 경우를 처리하는 이벤트입니다.
event_inherited();

if (action == 2 || action == 4)
{
    action = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 건설 부분입니다.
event_inherited();

if (global.lock_step == false)
{
    // GUI에 명령을 뿌릴 변수입니다. []은 순서입니다.
    get_command[0] = 0; // 정지.
    get_command[1] = 1; // 이동.
    get_command[2] = 9; // 자원 채집.
    get_command[3] = 8; // 건설.
    get_command[4] = 5; // 일반 건물.
    get_command[5] = 6; // 군사 건물.
    get_command[6] = 7; // 방어 건물.
    get_command[7] = -1; // 없음.
    
    if (action != 9) {resource_time = 0;}
    
    switch(action)
    {
        case 0: break;
        case 1: break;
        case 2: break;
        case 3: break;
        case 4: action = 1; break;
        case 10: break;
        case 19: break;
        
        case 5: // 일반 건물 건설.
        {
            get_command[0] = 170;
            get_command[1] = 171;
            get_command[2] = 172;
            get_command[3] = 176;
            get_command[4] = 178;
            get_command[5] = 180;
            get_command[6] = -1;
            get_command[7] = 4;
            
            // 스프라이트 변경.
            if (path_position == 1) 
            {
                var _spr = sprite[0];
                if (sprite_index != _spr) {sprite_index = _spr;}
            }
            break;
        }
        case 6: // 군사 건물 건설.
        {
            get_command[0] = 174;
            get_command[1] = 177;
            get_command[2] = 179;
            get_command[3] = -1;
            get_command[4] = -1;
            get_command[5] = -1;
            get_command[6] = -1;
            get_command[7] = 4; 
            
            // 스프라이트 변경.
            if (path_position == 1) 
            {
                var _spr = sprite[0];
                if (sprite_index != _spr) {sprite_index = _spr;}
            }
            break;
        }
        case 7: // 방어 건물 건설.
        {
            get_command[0] = 173;
            get_command[1] = 175;
            get_command[2] = -1;
            get_command[3] = -1;
            get_command[4] = -1;
            get_command[5] = -1;
            get_command[6] = -1;
            get_command[7] = 4; 
            
            // 스프라이트 변경.
            if (path_position == 1) 
            {
                var _spr = sprite[0];
                if (sprite_index != _spr) {sprite_index = _spr;}
            }
            break;
        }
        
        case 8: // 건설.
        {
            var _ins = instance_position(move_x, move_y, Obj_Building);
            if (instance_exists(_ins) == true)
            {
                var _width = (sprite_get_width(sprite_index) / 2);
                var _height = (sprite_get_height(sprite_index) / 2);
                var _place = collision_rectangle(x - _width, y - _height, x + _width, y + _height, _ins, false, true);
                if (instance_exists(_place) == true) 
                {
                    if (set_player != _ins.set_player) {action = 0;}
                    else if (_ins.id == _place.id) &amp;&amp; (_ins.build &gt; 0)
                    &amp;&amp; (_ins.build_id == noone) || (_ins.build_id == self.id)
                    {
                        path_end();
                        _ins.build_id = self.id;

                        var _dir = point_direction(x, y, _ins.x, _ins.y);
                        direction = _dir;
                        if (abs(image_angle - _dir) &lt; attack_angle)
                        {
                            var _spr = sprite[2];
                            if (sprite_index != _spr) {sprite_index = _spr;}
                            
                            var _value = ((_ins.hp_max / _ins.build_time_max) / room_speed);
                            if (_ins.build == 2) // 자원 소모.
                            {
                                var _resource_a = floor(_ins.build_resource[0] / (_ins.hp_max / _value));
                                var _resource_b = floor(_ins.build_resource[1] / (_ins.hp_max / _value));
                                if (global.get_resource[set_player, 0] - global.get_resource_value[set_player, 0] &gt;= _resource_a)
                                &amp;&amp; (global.get_resource[set_player, 1] - global.get_resource_value[set_player, 1] &gt;= _resource_b)
                                {
                                    global.get_resource_value[set_player, 0] += _resource_a;
                                    global.get_resource_value[set_player, 1] += _resource_b;
                                }
                                else
                                {
                                    action = 0;
                                    break;
                                }
                            }
                            
                            if (_ins.hp &gt;= _ins.hp_max) 
                            {
                                _ins.hp = _ins.hp_max;
                                if (_ins.build == 2) {action = 0;}
                            }
                            else {_ins.hp += _value;}
                            
                            if (_ins.build == 1)
                            {
                                if (_ins.build_time &gt;= _ins.hp_max)
                                {
                                    _ins.build = 2;
                                    action = 0;
                                    
                                    if (_ins.object_index == Obj_101)
                                    &amp;&amp; (ai_obj == noone)
                                    {
                                        action = 9;
                                    }
                                }
                                else {_ins.build_time += _value;}
                            }
                        }
                    }
                    else 
                    {
                        action = 0;
                    }
                }
                else    
                {
                    var _spr = sprite[1];
                    if (sprite_index != _spr) {sprite_index = _spr;}

                    if (moving == true)
                    {
                        path = node_path_work_repair(path, move_x, move_y);
                        path_start(path, move_speed, path_action_stop, false);
                        moving = false;
                    }
                }
            } else {action = 0;}
            break;
        }
        
        case 9: // 자원 채집.
        {
            if (resource_get == false)
            {
                var _ins = instance_position(move_x, move_y, Obj_Sight);
                if (instance_exists(_ins) == true)
                {
                    if (_ins.object_index == Obj_Ore)
                    || (_ins.object_index == Obj_101) &amp;&amp; (_ins.build == 2)
                    {
                        var _width = (sprite_get_width(sprite_index) / 2);
                        var _height = (sprite_get_height(sprite_index) / 2);
                        var _place = collision_rectangle(x - _width, y - _height, x + _width, y + _height, _ins, false, true);
                        if (instance_exists(_place) == true)
                        {
                            path_end();
                            var _dir = point_direction(x, y, _ins.x, _ins.y);
                            direction = _dir;
                            
                            if ((_ins.resource_id == noone) || (_ins.resource_id == self.id))
                            &amp;&amp; (abs(image_angle - _dir) &lt; attack_angle)
                            {
                                _ins.resource_id = self.id;
                                
                                if (resource_time &gt;= resource_time_max)
                                {
                                    _ins.resource_id = noone;

                                    resource_get = true;
                                    moving = true;
                                    
                                    if (_ins.object_index == Obj_Ore) 
                                    {
                                        _ins.hp -= resource_get_value[0];
                                        if (_ins.hp &lt;= 0)
                                        {
                                            while(true)
                                            {
                                                var _res = instance_nearest(x, y, Obj_Ore);
                                                if (instance_exists(_res) == true)
                                                &amp;&amp; (distance_to_object(_res) &lt;= resource_serch_range)
                                                {
                                                    if (_res.resource_id == noone)
                                                    &amp;&amp; (_res.id != _ins.id)
                                                    {
                                                        move_x = _res.x;
                                                        move_y = _res.y;
                                                        moving = true;
                                                        break;
                                                    }
                                                    else {instance_deactivate_object(_res.id);}
                                                } 
                                                else {break;}
                                            }
                                            instance_activate_all();
                                        }
                                        resource_menu = 0;
                                    }
                                    else if (_ins.object_index == Obj_101) 
                                    {
                                        _ins.resource_value -= resource_get_value[1];
                                        resource_menu = 1;
                                    }
                                    resource_time = 0;
                                } 
                                else 
                                {
                                    var _spr = sprite[2];
                                    if (sprite_index != _spr) {sprite_index = _spr;}

                                    direction = _dir;
                                    
                                    var _part = noone;
                                    if (_ins.object_index == Obj_Ore) 
                                    {
                                        resource_time ++;
                                    }
                                    else if (_ins.object_index == Obj_101) 
                                    {
                                        if (_ins.resource_value &lt;= 0)
                                        {
                                            _ins.resource_id = noone;
                                            action = 0;
                                        }
                                        resource_time += 2;
                                    }
                                }
                            }
                            else if (_ins.object_index == Obj_Ore) // 자리에 이미 누군가 있을 경우.
                            {
                                while(true)
                                {
                                    var _res = instance_nearest(x, y, Obj_Ore);
                                    if (instance_exists(_res) == true)
                                    &amp;&amp; (distance_to_object(_res) &lt;= resource_serch_range)
                                    {
                                        if (_res.resource_id == noone)
                                        {
                                            move_x = _res.x;
                                            move_y = _res.y;
                                            moving = true;
                                            break;
                                        }
                                        else {instance_deactivate_object(_res.id);}
                                    } 
                                    else {break;}
                                }
                                instance_activate_all();
                            }
                        }
                        else
                        {
                            var _spr = sprite[1];
                            if (sprite_index != _spr) {sprite_index = _spr;}
                            
                            if (moving == true)
                            {
                                path = node_path_work(path, _ins.x, _ins.y);
                                path_start(path, move_speed, path_action_stop, false);
                                moving = false;
                            }
                        }
                    }
                    else {action = 0;}
                }
                else {action = 0;}
            }
            else if (resource_get == true) // 자원을 다 캤을 경우.
            {
                while(true)
                {
                    var _ins = instance_nearest(x, y, Obj_Building);
                    if (instance_exists(_ins) == true)
                    {
                        if (_ins.resource_building == true)
                        &amp;&amp; (set_player == _ins.set_player)
                        &amp;&amp; (_ins.build == 2)
                        {
                            break;
                        }
                        else
                        {
                            instance_deactivate_object(_ins);
                        }
                    } else {_ins = noone; break;}
                }
                instance_activate_all();
                
                if (instance_exists(_ins) == true) // 건물 찾았을 경우.
                {
                    var _width = (sprite_get_width(sprite_index) / 2);
                    var _height = (sprite_get_height(sprite_index) / 2);
                    var _place = collision_rectangle(x - _width, y - _height, x + _width, y + _height, _ins, false, true);
                    if (instance_exists(_place) == true)
                    {
                        path_end();
                        var _dir = point_direction(x, y, _ins.x, _ins.y);
                        direction = _dir;
                        
                        if (abs(image_angle - _dir) &lt; attack_angle)
                        {
                            resource_get = false;
                            moving = true;
                            
                            var _value = 0;
                            switch(resource_menu)
                            {
                                case 0: _value = resource_get_value[0]; break;
                                case 1: _value = resource_get_value[1]; break;
                            }
                            global.get_resource_value[set_player, resource_menu] -= _value;
                        }
                    }
                    else
                    {
                        var _spr = sprite[1];
                        if (sprite_index != _spr) {sprite_index = _spr;}

                        if (moving == true)
                        {
                            path = node_path_work_return(path, _ins.x, _ins.y);
                            path_start(path, move_speed, path_action_stop, false);
                            moving = false;
                        }
                    }
                } else {action = 0;}
            }
            break;
        }
        default: // 건물 건설.
        {
            build_obj = return_obj_number(action);
            var _number = return_csv_number(build_obj);
            global.get_resource_value[set_player, 0] += real(global.sight_table[_number, return_str_number("create_resource_1")]);
            global.get_resource_value[set_player, 1] += real(global.sight_table[_number, return_str_number("create_resource_2")]);
            global.get_resource_value[set_player, 2] -= real(global.sight_table[_number, return_str_number("create_resource_3")]);
            action = 19;   
        }
    }

    if (action == 19)
    {
        if (instance_exists(build_target) == false)
        {
            var _ins = instance_create(move_x, move_y, build_obj);
            build_target = _ins.id;
            
            _ins.build = 0;
            _ins.build_id = self.id;
            _ins.build_num = action;
            
            _ins.set_player = set_player;
            _ins.set_team = set_team;
            _ins.set_colour = set_colour;
            _ins.hp = 1;
            
            if (instance_exists(ai_obj) == true)
            {
                _ins.ai_obj = ai_obj;
            }
        }
        else 
        {
            var _width = (sprite_get_width(sprite_index) / 2);
            var _height = (sprite_get_height(sprite_index) / 2);
            var _place = collision_rectangle(x - _width, y - _height, x + _width, y + _height, build_target, false, true);
            if (instance_exists(_place) == true)
            {
                path_end();
               
                var _check = noone;
                with(build_target)
                {
                    _check = instance_place(x, y, Obj_Building);
                }
                if (instance_exists(_check) == true)
                &amp;&amp; (_check.build != 0)
                {
                    build_target = noone; build_obj = noone;
                    instance_destroy(build_target);

                    action = 0;
                }
                else
                {
                    build_target.build = 1;
                    build_target.build_id = noone;
                    build_target.set_id = global.id_count ++;
               
                    ds_list_add(global.list_id, build_target.set_id);
                    ds_list_add(global.list_id, build_target.id);
                    if (global.set_team == other.set_team)
                    {
                        ds_list_add(global.list_sight, build_target.id);
                    }
                    
                    build_target = noone; build_obj = noone;
                    action = 8;
                }
            }
            else
            {
                var _spr = sprite[1];
                if (sprite_index != _spr) {sprite_index = _spr;}
                
                if (moving == true)
                {
                    path = node_path_work_build(path, move_x, move_y);
                    path_start(path, move_speed, path_action_stop, false);
                    moving = false;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 파티클 &amp; 효과음.
if (action == 8)
&amp;&amp; (sprite_index == sprite[2]) &amp;&amp; (image_index == 2)
{
    if (view_xview[0] &lt;= bbox_right &amp;&amp; bbox_left &lt;= view_xview[0] + view_wview[0] &amp;&amp; view_yview[0] &lt;= bbox_bottom &amp;&amp; bbox_top &lt;= view_yview[0] + view_hview[0]) 
    &amp;&amp; (ds_grid_get(Obj_Game_System.fog_grid, f_x, f_y) == 0)
    {
        var _ins = instance_position(move_x, move_y, Obj_Building);
        if (instance_exists(_ins) == true)
        &amp;&amp; (_ins.build_id == self.id)
        {
            _part = Obj_Part_System.human_building;
        
            part_particles_create(Obj_Part_System.system_part, _ins.x, _ins.y, _part, 5);
            audio_play_sound_at(Sou_Attack_Building, -(x), y, 0, 100, 320, 1, false, priority)
        }
    }
}


if (action == 9)
&amp;&amp; (sprite_index == sprite[2]) &amp;&amp; (image_index == 2)
{
    if (view_xview[0] &lt;= bbox_right &amp;&amp; bbox_left &lt;= view_xview[0] + view_wview[0] &amp;&amp; view_yview[0] &lt;= bbox_bottom &amp;&amp; bbox_top &lt;= view_yview[0] + view_hview[0]) 
    &amp;&amp; (ds_grid_get(Obj_Game_System.fog_grid, f_x, f_y) == 0)
    {
        var _ins = instance_position(move_x, move_y, Obj_Sight);
        if (instance_exists(_ins) == true)
        &amp;&amp; (_ins.resource_id == self.id)
        {
            var _part = 0;
            var _sound = 0;
            var _priority = priority;
            if (_ins.object_index == Obj_Ore)
            {
                _part = Obj_Part_System.attack_ore;
                _sound = Sou_Attack_Ore;
            }
            else if (_ins.object_index == Obj_101) 
            {
                _part = Obj_Part_System.attack_oil;
                _sound = Sou_Attack_Ore;
                _priority ++;
            }

            part_particles_create(Obj_Part_System.system_part, _ins.x, _ins.y, _part, 5);
            var _index = audio_play_sound_at(_sound, -(x), y, 0, 100, 320, 1, false, _priority);
            ds_list_add(Obj_Game_System.audio_channel, _index);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 자원도 같이 그립니다.
event_inherited();

if (resource_get == true)
&amp;&amp; (view_xview[0] &lt;= bbox_right &amp;&amp; bbox_left &lt;= view_xview[0] + view_wview[0] &amp;&amp; view_yview[0] &lt;= bbox_bottom &amp;&amp; bbox_top &lt;= view_yview[0] + view_hview[0]) 
&amp;&amp; (ds_grid_get(Obj_Game_System.fog_grid, f_x, f_y) == 0)
{
    var _dir = image_angle;
    var _len_x = lengthdir_x(24, _dir);
    var _len_y = lengthdir_y(24, _dir);
    var _index = noone;
    switch(resource_menu)
    {
        case 0: _index = 0; break;
        case 1: _index = 1; break;
    }
    draw_sprite(Spr_GUI_Resource, _index, (x - 12) + _len_x, (y - 12) + _len_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
